{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='grafana', url='', help=''),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of Grafana', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'grafana.integreatly.org/v1beta1',
    kind: 'Grafana',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help=''),
  spec: {
    '#client':: d.obj(help=''),
    client: {
      '#withPreferIngress':: d.fn(help='', args=[d.arg(name='preferIngress', type=d.T.boolean)]),
      withPreferIngress(preferIngress): { spec+: { client+: { preferIngress: preferIngress } } },
      '#withTimeout':: d.fn(help='', args=[d.arg(name='timeout', type=d.T.integer)]),
      withTimeout(timeout): { spec+: { client+: { timeout: timeout } } },
    },
    '#deployment':: d.obj(help=''),
    deployment: {
      '#metadata':: d.obj(help=''),
      metadata: {
        '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { deployment+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { deployment+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { deployment+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { deployment+: { metadata+: { labels+: labels } } } },
      },
      '#spec':: d.obj(help=''),
      spec: {
        '#selector':: d.obj(help=''),
        selector: {
          '#matchExpressions':: d.obj(help=''),
          matchExpressions: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressions(matchExpressions): { spec+: { deployment+: { spec+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } },
          '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressionsMixin(matchExpressions): { spec+: { deployment+: { spec+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } },
          '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabels(matchLabels): { spec+: { deployment+: { spec+: { selector+: { matchLabels: matchLabels } } } } },
          '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabelsMixin(matchLabels): { spec+: { deployment+: { spec+: { selector+: { matchLabels+: matchLabels } } } } },
        },
        '#strategy':: d.obj(help=''),
        strategy: {
          '#rollingUpdate':: d.obj(help=''),
          rollingUpdate: {
            '#withMaxSurge':: d.fn(help='', args=[d.arg(name='maxSurge', type=d.T.any)]),
            withMaxSurge(maxSurge): { spec+: { deployment+: { spec+: { strategy+: { rollingUpdate+: { maxSurge: maxSurge } } } } } },
            '#withMaxUnavailable':: d.fn(help='', args=[d.arg(name='maxUnavailable', type=d.T.any)]),
            withMaxUnavailable(maxUnavailable): { spec+: { deployment+: { spec+: { strategy+: { rollingUpdate+: { maxUnavailable: maxUnavailable } } } } } },
          },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { spec+: { deployment+: { spec+: { strategy+: { type: type } } } } },
        },
        '#template':: d.obj(help=''),
        template: {
          '#metadata':: d.obj(help=''),
          metadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { spec+: { deployment+: { spec+: { template+: { metadata+: { annotations: annotations } } } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { spec+: { deployment+: { spec+: { template+: { metadata+: { annotations+: annotations } } } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { spec+: { deployment+: { spec+: { template+: { metadata+: { labels: labels } } } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { spec+: { deployment+: { spec+: { template+: { metadata+: { labels+: labels } } } } } },
          },
          '#spec':: d.obj(help=''),
          spec: {
            '#affinity':: d.obj(help=''),
            affinity: {
              '#nodeAffinity':: d.obj(help=''),
              nodeAffinity: {
                '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
                preferredDuringSchedulingIgnoredDuringExecution: {
                  '#preference':: d.obj(help=''),
                  preference: {
                    '#matchExpressions':: d.obj(help=''),
                    matchExpressions: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                      withOperator(operator): { operator: operator },
                      '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                      withValues(values): { values: if std.isArray(v=values) then values else [values] },
                      '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                      withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                    },
                    '#matchFields':: d.obj(help=''),
                    matchFields: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                      withOperator(operator): { operator: operator },
                      '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                      withValues(values): { values: if std.isArray(v=values) then values else [values] },
                      '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                      withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                    },
                    '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressions(matchExpressions): { preference+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                    '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressionsMixin(matchExpressions): { preference+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                    '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
                    withMatchFields(matchFields): { preference+: { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
                    '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
                    withMatchFieldsMixin(matchFields): { preference+: { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
                  },
                  '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
                  withWeight(weight): { weight: weight },
                },
                '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
                requiredDuringSchedulingIgnoredDuringExecution: {
                  '#nodeSelectorTerms':: d.obj(help=''),
                  nodeSelectorTerms: {
                    '#matchExpressions':: d.obj(help=''),
                    matchExpressions: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                      withOperator(operator): { operator: operator },
                      '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                      withValues(values): { values: if std.isArray(v=values) then values else [values] },
                      '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                      withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                    },
                    '#matchFields':: d.obj(help=''),
                    matchFields: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                      withOperator(operator): { operator: operator },
                      '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                      withValues(values): { values: if std.isArray(v=values) then values else [values] },
                      '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                      withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                    },
                    '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressions(matchExpressions): { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
                    '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressionsMixin(matchExpressions): { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
                    '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
                    withMatchFields(matchFields): { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] },
                    '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
                    withMatchFieldsMixin(matchFields): { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] },
                  },
                  '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                  withNodeSelectorTerms(nodeSelectorTerms): { spec+: { deployment+: { spec+: { template+: { spec+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } } },
                  '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                  withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { deployment+: { spec+: { template+: { spec+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } } },
                },
                '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
                withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { deployment+: { spec+: { template+: { spec+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } } },
                '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
                withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { deployment+: { spec+: { template+: { spec+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } } },
              },
              '#podAffinity':: d.obj(help=''),
              podAffinity: {
                '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
                preferredDuringSchedulingIgnoredDuringExecution: {
                  '#podAffinityTerm':: d.obj(help=''),
                  podAffinityTerm: {
                    '#labelSelector':: d.obj(help=''),
                    labelSelector: {
                      '#matchExpressions':: d.obj(help=''),
                      matchExpressions: {
                        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                        withKey(key): { key: key },
                        '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                        withOperator(operator): { operator: operator },
                        '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                        withValues(values): { values: if std.isArray(v=values) then values else [values] },
                        '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                        withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                      },
                      '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                      withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                      '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                      withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                      '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                      withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
                      '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                      withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
                    },
                    '#namespaceSelector':: d.obj(help=''),
                    namespaceSelector: {
                      '#matchExpressions':: d.obj(help=''),
                      matchExpressions: {
                        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                        withKey(key): { key: key },
                        '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                        withOperator(operator): { operator: operator },
                        '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                        withValues(values): { values: if std.isArray(v=values) then values else [values] },
                        '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                        withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                      },
                      '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                      withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                      '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                      withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                      '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                      withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
                      '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                      withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
                    },
                    '#withMatchLabelKeys':: d.fn(help='', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
                    withMatchLabelKeys(matchLabelKeys): { podAffinityTerm+: { matchLabelKeys: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] } },
                    '#withMatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
                    withMatchLabelKeysMixin(matchLabelKeys): { podAffinityTerm+: { matchLabelKeys+: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] } },
                    '#withMismatchLabelKeys':: d.fn(help='', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
                    withMismatchLabelKeys(mismatchLabelKeys): { podAffinityTerm+: { mismatchLabelKeys: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] } },
                    '#withMismatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
                    withMismatchLabelKeysMixin(mismatchLabelKeys): { podAffinityTerm+: { mismatchLabelKeys+: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] } },
                    '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
                    withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                    '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
                    withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                    '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
                    withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
                  },
                  '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
                  withWeight(weight): { weight: weight },
                },
                '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
                requiredDuringSchedulingIgnoredDuringExecution: {
                  '#labelSelector':: d.obj(help=''),
                  labelSelector: {
                    '#matchExpressions':: d.obj(help=''),
                    matchExpressions: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                      withOperator(operator): { operator: operator },
                      '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                      withValues(values): { values: if std.isArray(v=values) then values else [values] },
                      '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                      withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                    },
                    '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                    '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                    '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
                    '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
                  },
                  '#namespaceSelector':: d.obj(help=''),
                  namespaceSelector: {
                    '#matchExpressions':: d.obj(help=''),
                    matchExpressions: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                      withOperator(operator): { operator: operator },
                      '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                      withValues(values): { values: if std.isArray(v=values) then values else [values] },
                      '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                      withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                    },
                    '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                    '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                    '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
                    '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
                  },
                  '#withMatchLabelKeys':: d.fn(help='', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
                  withMatchLabelKeys(matchLabelKeys): { matchLabelKeys: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
                  '#withMatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
                  withMatchLabelKeysMixin(matchLabelKeys): { matchLabelKeys+: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
                  '#withMismatchLabelKeys':: d.fn(help='', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
                  withMismatchLabelKeys(mismatchLabelKeys): { mismatchLabelKeys: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] },
                  '#withMismatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
                  withMismatchLabelKeysMixin(mismatchLabelKeys): { mismatchLabelKeys+: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] },
                  '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
                  withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
                  '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
                  withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
                  '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
                  withTopologyKey(topologyKey): { topologyKey: topologyKey },
                },
                '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
                withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { deployment+: { spec+: { template+: { spec+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } } },
                '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
                withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { deployment+: { spec+: { template+: { spec+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } } },
                '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
                withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { deployment+: { spec+: { template+: { spec+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } } },
                '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
                withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { deployment+: { spec+: { template+: { spec+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } } },
              },
              '#podAntiAffinity':: d.obj(help=''),
              podAntiAffinity: {
                '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
                preferredDuringSchedulingIgnoredDuringExecution: {
                  '#podAffinityTerm':: d.obj(help=''),
                  podAffinityTerm: {
                    '#labelSelector':: d.obj(help=''),
                    labelSelector: {
                      '#matchExpressions':: d.obj(help=''),
                      matchExpressions: {
                        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                        withKey(key): { key: key },
                        '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                        withOperator(operator): { operator: operator },
                        '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                        withValues(values): { values: if std.isArray(v=values) then values else [values] },
                        '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                        withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                      },
                      '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                      withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                      '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                      withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                      '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                      withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
                      '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                      withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
                    },
                    '#namespaceSelector':: d.obj(help=''),
                    namespaceSelector: {
                      '#matchExpressions':: d.obj(help=''),
                      matchExpressions: {
                        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                        withKey(key): { key: key },
                        '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                        withOperator(operator): { operator: operator },
                        '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                        withValues(values): { values: if std.isArray(v=values) then values else [values] },
                        '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                        withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                      },
                      '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                      withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                      '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                      withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                      '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                      withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
                      '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                      withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
                    },
                    '#withMatchLabelKeys':: d.fn(help='', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
                    withMatchLabelKeys(matchLabelKeys): { podAffinityTerm+: { matchLabelKeys: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] } },
                    '#withMatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
                    withMatchLabelKeysMixin(matchLabelKeys): { podAffinityTerm+: { matchLabelKeys+: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] } },
                    '#withMismatchLabelKeys':: d.fn(help='', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
                    withMismatchLabelKeys(mismatchLabelKeys): { podAffinityTerm+: { mismatchLabelKeys: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] } },
                    '#withMismatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
                    withMismatchLabelKeysMixin(mismatchLabelKeys): { podAffinityTerm+: { mismatchLabelKeys+: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] } },
                    '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
                    withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                    '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
                    withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                    '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
                    withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
                  },
                  '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
                  withWeight(weight): { weight: weight },
                },
                '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
                requiredDuringSchedulingIgnoredDuringExecution: {
                  '#labelSelector':: d.obj(help=''),
                  labelSelector: {
                    '#matchExpressions':: d.obj(help=''),
                    matchExpressions: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                      withOperator(operator): { operator: operator },
                      '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                      withValues(values): { values: if std.isArray(v=values) then values else [values] },
                      '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                      withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                    },
                    '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                    '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                    '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
                    '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
                  },
                  '#namespaceSelector':: d.obj(help=''),
                  namespaceSelector: {
                    '#matchExpressions':: d.obj(help=''),
                    matchExpressions: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                      withOperator(operator): { operator: operator },
                      '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                      withValues(values): { values: if std.isArray(v=values) then values else [values] },
                      '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                      withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                    },
                    '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                    '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                    '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
                    '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
                  },
                  '#withMatchLabelKeys':: d.fn(help='', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
                  withMatchLabelKeys(matchLabelKeys): { matchLabelKeys: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
                  '#withMatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
                  withMatchLabelKeysMixin(matchLabelKeys): { matchLabelKeys+: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
                  '#withMismatchLabelKeys':: d.fn(help='', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
                  withMismatchLabelKeys(mismatchLabelKeys): { mismatchLabelKeys: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] },
                  '#withMismatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
                  withMismatchLabelKeysMixin(mismatchLabelKeys): { mismatchLabelKeys+: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] },
                  '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
                  withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
                  '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
                  withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
                  '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
                  withTopologyKey(topologyKey): { topologyKey: topologyKey },
                },
                '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
                withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { deployment+: { spec+: { template+: { spec+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } } },
                '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
                withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { deployment+: { spec+: { template+: { spec+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } } },
                '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
                withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { deployment+: { spec+: { template+: { spec+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } } },
                '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
                withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { deployment+: { spec+: { template+: { spec+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } } },
              },
            },
            '#containers':: d.obj(help=''),
            containers: {
              '#env':: d.obj(help=''),
              env: {
                '#valueFrom':: d.obj(help=''),
                valueFrom: {
                  '#configMapKeyRef':: d.obj(help=''),
                  configMapKeyRef: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
                    '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                    withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
                  },
                  '#fieldRef':: d.obj(help=''),
                  fieldRef: {
                    '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                    withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
                    '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                    withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
                  },
                  '#resourceFieldRef':: d.obj(help=''),
                  resourceFieldRef: {
                    '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                    withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
                    '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                    withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
                    '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                    withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
                  },
                  '#secretKeyRef':: d.obj(help=''),
                  secretKeyRef: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
                    '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                    withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
                  },
                },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#envFrom':: d.obj(help=''),
              envFrom: {
                '#configMapRef':: d.obj(help=''),
                configMapRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { configMapRef+: { name: name } },
                  '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                  withOptional(optional): { configMapRef+: { optional: optional } },
                },
                '#secretRef':: d.obj(help=''),
                secretRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { secretRef+: { name: name } },
                  '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                  withOptional(optional): { secretRef+: { optional: optional } },
                },
                '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
                withPrefix(prefix): { prefix: prefix },
              },
              '#lifecycle':: d.obj(help=''),
              lifecycle: {
                '#postStart':: d.obj(help=''),
                postStart: {
                  '#exec':: d.obj(help=''),
                  exec: {
                    '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                    withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                    '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                    withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
                  },
                  '#httpGet':: d.obj(help=''),
                  httpGet: {
                    '#httpHeaders':: d.obj(help=''),
                    httpHeaders: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                    withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
                    '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                    withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                    '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                    withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                    '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                    withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
                    '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                    withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
                    '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                    withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
                  },
                  '#sleep':: d.obj(help=''),
                  sleep: {
                    '#withSeconds':: d.fn(help='', args=[d.arg(name='seconds', type=d.T.integer)]),
                    withSeconds(seconds): { lifecycle+: { postStart+: { sleep+: { seconds: seconds } } } },
                  },
                  '#tcpSocket':: d.obj(help=''),
                  tcpSocket: {
                    '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                    withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
                    '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                    withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
                  },
                },
                '#preStop':: d.obj(help=''),
                preStop: {
                  '#exec':: d.obj(help=''),
                  exec: {
                    '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                    withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                    '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                    withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
                  },
                  '#httpGet':: d.obj(help=''),
                  httpGet: {
                    '#httpHeaders':: d.obj(help=''),
                    httpHeaders: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                    withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
                    '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                    withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                    '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                    withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                    '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                    withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
                    '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                    withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
                    '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                    withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
                  },
                  '#sleep':: d.obj(help=''),
                  sleep: {
                    '#withSeconds':: d.fn(help='', args=[d.arg(name='seconds', type=d.T.integer)]),
                    withSeconds(seconds): { lifecycle+: { preStop+: { sleep+: { seconds: seconds } } } },
                  },
                  '#tcpSocket':: d.obj(help=''),
                  tcpSocket: {
                    '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                    withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
                    '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                    withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
                  },
                },
              },
              '#livenessProbe':: d.obj(help=''),
              livenessProbe: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
                },
                '#grpc':: d.obj(help=''),
                grpc: {
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                  withPort(port): { livenessProbe+: { grpc+: { port: port } } },
                  '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                  withService(service): { livenessProbe+: { grpc+: { service: service } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
                },
                '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
                withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
                '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
                withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
                '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
                withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
                '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
                withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
                '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
                withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
                '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
                withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
              },
              '#ports':: d.obj(help=''),
              ports: {
                '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
                withContainerPort(containerPort): { containerPort: containerPort },
                '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
                withHostIP(hostIP): { hostIP: hostIP },
                '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
                withHostPort(hostPort): { hostPort: hostPort },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
                withProtocol(protocol): { protocol: protocol },
              },
              '#readinessProbe':: d.obj(help=''),
              readinessProbe: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
                },
                '#grpc':: d.obj(help=''),
                grpc: {
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                  withPort(port): { readinessProbe+: { grpc+: { port: port } } },
                  '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                  withService(service): { readinessProbe+: { grpc+: { service: service } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
                },
                '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
                withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
                '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
                withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
                '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
                withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
                '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
                withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
                '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
                withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
                '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
                withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
              },
              '#resizePolicy':: d.obj(help=''),
              resizePolicy: {
                '#withResourceName':: d.fn(help='', args=[d.arg(name='resourceName', type=d.T.string)]),
                withResourceName(resourceName): { resourceName: resourceName },
                '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
                withRestartPolicy(restartPolicy): { restartPolicy: restartPolicy },
              },
              '#resources':: d.obj(help=''),
              resources: {
                '#claims':: d.obj(help=''),
                claims: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withClaims':: d.fn(help='', args=[d.arg(name='claims', type=d.T.array)]),
                withClaims(claims): { resources+: { claims: if std.isArray(v=claims) then claims else [claims] } },
                '#withClaimsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='claims', type=d.T.array)]),
                withClaimsMixin(claims): { resources+: { claims+: if std.isArray(v=claims) then claims else [claims] } },
                '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
                withLimits(limits): { resources+: { limits: limits } },
                '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
                withLimitsMixin(limits): { resources+: { limits+: limits } },
                '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
                withRequests(requests): { resources+: { requests: requests } },
                '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
                withRequestsMixin(requests): { resources+: { requests+: requests } },
              },
              '#securityContext':: d.obj(help=''),
              securityContext: {
                '#appArmorProfile':: d.obj(help=''),
                appArmorProfile: {
                  '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
                  withLocalhostProfile(localhostProfile): { securityContext+: { appArmorProfile+: { localhostProfile: localhostProfile } } },
                  '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                  withType(type): { securityContext+: { appArmorProfile+: { type: type } } },
                },
                '#capabilities':: d.obj(help=''),
                capabilities: {
                  '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
                  withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
                  '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
                  withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
                  '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
                  withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
                  '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
                  withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
                },
                '#seLinuxOptions':: d.obj(help=''),
                seLinuxOptions: {
                  '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
                  withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
                  '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
                  withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
                  '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                  withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
                  '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
                  withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
                },
                '#seccompProfile':: d.obj(help=''),
                seccompProfile: {
                  '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
                  withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
                  '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                  withType(type): { securityContext+: { seccompProfile+: { type: type } } },
                },
                '#windowsOptions':: d.obj(help=''),
                windowsOptions: {
                  '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
                  withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
                  '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
                  withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
                  '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
                  withHostProcess(hostProcess): { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } },
                  '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
                  withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
                },
                '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
                withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
                '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
                withPrivileged(privileged): { securityContext+: { privileged: privileged } },
                '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
                withProcMount(procMount): { securityContext+: { procMount: procMount } },
                '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
                withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
                '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
                withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
                '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
                withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
                '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
                withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
              },
              '#startupProbe':: d.obj(help=''),
              startupProbe: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
                },
                '#grpc':: d.obj(help=''),
                grpc: {
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                  withPort(port): { startupProbe+: { grpc+: { port: port } } },
                  '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                  withService(service): { startupProbe+: { grpc+: { service: service } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { startupProbe+: { httpGet+: { host: host } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { startupProbe+: { httpGet+: { path: path } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { startupProbe+: { httpGet+: { port: port } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
                },
                '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
                withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
                '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
                withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
                '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
                withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
                '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
                withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
                '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
                withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
                '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
                withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
              },
              '#volumeDevices':: d.obj(help=''),
              volumeDevices: {
                '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
                withDevicePath(devicePath): { devicePath: devicePath },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
              },
              '#volumeMounts':: d.obj(help=''),
              volumeMounts: {
                '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
                withMountPath(mountPath): { mountPath: mountPath },
                '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
                withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { readOnly: readOnly },
                '#withRecursiveReadOnly':: d.fn(help='', args=[d.arg(name='recursiveReadOnly', type=d.T.string)]),
                withRecursiveReadOnly(recursiveReadOnly): { recursiveReadOnly: recursiveReadOnly },
                '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
                withSubPath(subPath): { subPath: subPath },
                '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
                withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
              },
              '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
              withArgs(args): { args: if std.isArray(v=args) then args else [args] },
              '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
              withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { command: if std.isArray(v=command) then command else [command] },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
              '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
              withEnv(env): { env: if std.isArray(v=env) then env else [env] },
              '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
              withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
              '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
              withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
              '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
              withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
              '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
              withImage(image): { image: image },
              '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
              withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
              withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
              '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
              withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
              '#withResizePolicy':: d.fn(help='', args=[d.arg(name='resizePolicy', type=d.T.array)]),
              withResizePolicy(resizePolicy): { resizePolicy: if std.isArray(v=resizePolicy) then resizePolicy else [resizePolicy] },
              '#withResizePolicyMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='resizePolicy', type=d.T.array)]),
              withResizePolicyMixin(resizePolicy): { resizePolicy+: if std.isArray(v=resizePolicy) then resizePolicy else [resizePolicy] },
              '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
              withRestartPolicy(restartPolicy): { restartPolicy: restartPolicy },
              '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
              withStdin(stdin): { stdin: stdin },
              '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
              withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
              '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
              withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
              '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
              withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
              '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
              withTty(tty): { tty: tty },
              '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
              withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
              '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
              withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
              '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
              withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
              '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
              withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
              '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
              withWorkingDir(workingDir): { workingDir: workingDir },
            },
            '#dnsConfig':: d.obj(help=''),
            dnsConfig: {
              '#options':: d.obj(help=''),
              options: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withNameservers':: d.fn(help='', args=[d.arg(name='nameservers', type=d.T.array)]),
              withNameservers(nameservers): { spec+: { deployment+: { spec+: { template+: { spec+: { dnsConfig+: { nameservers: if std.isArray(v=nameservers) then nameservers else [nameservers] } } } } } } },
              '#withNameserversMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nameservers', type=d.T.array)]),
              withNameserversMixin(nameservers): { spec+: { deployment+: { spec+: { template+: { spec+: { dnsConfig+: { nameservers+: if std.isArray(v=nameservers) then nameservers else [nameservers] } } } } } } },
              '#withOptions':: d.fn(help='', args=[d.arg(name='options', type=d.T.array)]),
              withOptions(options): { spec+: { deployment+: { spec+: { template+: { spec+: { dnsConfig+: { options: if std.isArray(v=options) then options else [options] } } } } } } },
              '#withOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='options', type=d.T.array)]),
              withOptionsMixin(options): { spec+: { deployment+: { spec+: { template+: { spec+: { dnsConfig+: { options+: if std.isArray(v=options) then options else [options] } } } } } } },
              '#withSearches':: d.fn(help='', args=[d.arg(name='searches', type=d.T.array)]),
              withSearches(searches): { spec+: { deployment+: { spec+: { template+: { spec+: { dnsConfig+: { searches: if std.isArray(v=searches) then searches else [searches] } } } } } } },
              '#withSearchesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='searches', type=d.T.array)]),
              withSearchesMixin(searches): { spec+: { deployment+: { spec+: { template+: { spec+: { dnsConfig+: { searches+: if std.isArray(v=searches) then searches else [searches] } } } } } } },
            },
            '#ephemeralContainers':: d.obj(help=''),
            ephemeralContainers: {
              '#env':: d.obj(help=''),
              env: {
                '#valueFrom':: d.obj(help=''),
                valueFrom: {
                  '#configMapKeyRef':: d.obj(help=''),
                  configMapKeyRef: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
                    '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                    withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
                  },
                  '#fieldRef':: d.obj(help=''),
                  fieldRef: {
                    '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                    withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
                    '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                    withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
                  },
                  '#resourceFieldRef':: d.obj(help=''),
                  resourceFieldRef: {
                    '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                    withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
                    '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                    withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
                    '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                    withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
                  },
                  '#secretKeyRef':: d.obj(help=''),
                  secretKeyRef: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
                    '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                    withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
                  },
                },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#envFrom':: d.obj(help=''),
              envFrom: {
                '#configMapRef':: d.obj(help=''),
                configMapRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { configMapRef+: { name: name } },
                  '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                  withOptional(optional): { configMapRef+: { optional: optional } },
                },
                '#secretRef':: d.obj(help=''),
                secretRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { secretRef+: { name: name } },
                  '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                  withOptional(optional): { secretRef+: { optional: optional } },
                },
                '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
                withPrefix(prefix): { prefix: prefix },
              },
              '#lifecycle':: d.obj(help=''),
              lifecycle: {
                '#postStart':: d.obj(help=''),
                postStart: {
                  '#exec':: d.obj(help=''),
                  exec: {
                    '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                    withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                    '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                    withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
                  },
                  '#httpGet':: d.obj(help=''),
                  httpGet: {
                    '#httpHeaders':: d.obj(help=''),
                    httpHeaders: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                    withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
                    '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                    withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                    '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                    withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                    '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                    withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
                    '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                    withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
                    '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                    withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
                  },
                  '#sleep':: d.obj(help=''),
                  sleep: {
                    '#withSeconds':: d.fn(help='', args=[d.arg(name='seconds', type=d.T.integer)]),
                    withSeconds(seconds): { lifecycle+: { postStart+: { sleep+: { seconds: seconds } } } },
                  },
                  '#tcpSocket':: d.obj(help=''),
                  tcpSocket: {
                    '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                    withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
                    '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                    withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
                  },
                },
                '#preStop':: d.obj(help=''),
                preStop: {
                  '#exec':: d.obj(help=''),
                  exec: {
                    '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                    withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                    '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                    withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
                  },
                  '#httpGet':: d.obj(help=''),
                  httpGet: {
                    '#httpHeaders':: d.obj(help=''),
                    httpHeaders: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                    withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
                    '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                    withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                    '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                    withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                    '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                    withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
                    '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                    withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
                    '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                    withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
                  },
                  '#sleep':: d.obj(help=''),
                  sleep: {
                    '#withSeconds':: d.fn(help='', args=[d.arg(name='seconds', type=d.T.integer)]),
                    withSeconds(seconds): { lifecycle+: { preStop+: { sleep+: { seconds: seconds } } } },
                  },
                  '#tcpSocket':: d.obj(help=''),
                  tcpSocket: {
                    '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                    withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
                    '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                    withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
                  },
                },
              },
              '#livenessProbe':: d.obj(help=''),
              livenessProbe: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
                },
                '#grpc':: d.obj(help=''),
                grpc: {
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                  withPort(port): { livenessProbe+: { grpc+: { port: port } } },
                  '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                  withService(service): { livenessProbe+: { grpc+: { service: service } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
                },
                '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
                withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
                '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
                withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
                '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
                withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
                '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
                withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
                '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
                withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
                '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
                withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
              },
              '#ports':: d.obj(help=''),
              ports: {
                '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
                withContainerPort(containerPort): { containerPort: containerPort },
                '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
                withHostIP(hostIP): { hostIP: hostIP },
                '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
                withHostPort(hostPort): { hostPort: hostPort },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
                withProtocol(protocol): { protocol: protocol },
              },
              '#readinessProbe':: d.obj(help=''),
              readinessProbe: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
                },
                '#grpc':: d.obj(help=''),
                grpc: {
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                  withPort(port): { readinessProbe+: { grpc+: { port: port } } },
                  '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                  withService(service): { readinessProbe+: { grpc+: { service: service } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
                },
                '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
                withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
                '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
                withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
                '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
                withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
                '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
                withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
                '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
                withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
                '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
                withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
              },
              '#resizePolicy':: d.obj(help=''),
              resizePolicy: {
                '#withResourceName':: d.fn(help='', args=[d.arg(name='resourceName', type=d.T.string)]),
                withResourceName(resourceName): { resourceName: resourceName },
                '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
                withRestartPolicy(restartPolicy): { restartPolicy: restartPolicy },
              },
              '#resources':: d.obj(help=''),
              resources: {
                '#claims':: d.obj(help=''),
                claims: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withClaims':: d.fn(help='', args=[d.arg(name='claims', type=d.T.array)]),
                withClaims(claims): { resources+: { claims: if std.isArray(v=claims) then claims else [claims] } },
                '#withClaimsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='claims', type=d.T.array)]),
                withClaimsMixin(claims): { resources+: { claims+: if std.isArray(v=claims) then claims else [claims] } },
                '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
                withLimits(limits): { resources+: { limits: limits } },
                '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
                withLimitsMixin(limits): { resources+: { limits+: limits } },
                '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
                withRequests(requests): { resources+: { requests: requests } },
                '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
                withRequestsMixin(requests): { resources+: { requests+: requests } },
              },
              '#securityContext':: d.obj(help=''),
              securityContext: {
                '#appArmorProfile':: d.obj(help=''),
                appArmorProfile: {
                  '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
                  withLocalhostProfile(localhostProfile): { securityContext+: { appArmorProfile+: { localhostProfile: localhostProfile } } },
                  '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                  withType(type): { securityContext+: { appArmorProfile+: { type: type } } },
                },
                '#capabilities':: d.obj(help=''),
                capabilities: {
                  '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
                  withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
                  '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
                  withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
                  '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
                  withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
                  '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
                  withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
                },
                '#seLinuxOptions':: d.obj(help=''),
                seLinuxOptions: {
                  '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
                  withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
                  '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
                  withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
                  '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                  withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
                  '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
                  withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
                },
                '#seccompProfile':: d.obj(help=''),
                seccompProfile: {
                  '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
                  withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
                  '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                  withType(type): { securityContext+: { seccompProfile+: { type: type } } },
                },
                '#windowsOptions':: d.obj(help=''),
                windowsOptions: {
                  '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
                  withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
                  '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
                  withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
                  '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
                  withHostProcess(hostProcess): { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } },
                  '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
                  withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
                },
                '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
                withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
                '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
                withPrivileged(privileged): { securityContext+: { privileged: privileged } },
                '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
                withProcMount(procMount): { securityContext+: { procMount: procMount } },
                '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
                withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
                '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
                withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
                '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
                withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
                '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
                withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
              },
              '#startupProbe':: d.obj(help=''),
              startupProbe: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
                },
                '#grpc':: d.obj(help=''),
                grpc: {
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                  withPort(port): { startupProbe+: { grpc+: { port: port } } },
                  '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                  withService(service): { startupProbe+: { grpc+: { service: service } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { startupProbe+: { httpGet+: { host: host } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { startupProbe+: { httpGet+: { path: path } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { startupProbe+: { httpGet+: { port: port } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
                },
                '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
                withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
                '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
                withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
                '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
                withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
                '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
                withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
                '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
                withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
                '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
                withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
              },
              '#volumeDevices':: d.obj(help=''),
              volumeDevices: {
                '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
                withDevicePath(devicePath): { devicePath: devicePath },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
              },
              '#volumeMounts':: d.obj(help=''),
              volumeMounts: {
                '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
                withMountPath(mountPath): { mountPath: mountPath },
                '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
                withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { readOnly: readOnly },
                '#withRecursiveReadOnly':: d.fn(help='', args=[d.arg(name='recursiveReadOnly', type=d.T.string)]),
                withRecursiveReadOnly(recursiveReadOnly): { recursiveReadOnly: recursiveReadOnly },
                '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
                withSubPath(subPath): { subPath: subPath },
                '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
                withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
              },
              '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
              withArgs(args): { args: if std.isArray(v=args) then args else [args] },
              '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
              withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { command: if std.isArray(v=command) then command else [command] },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
              '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
              withEnv(env): { env: if std.isArray(v=env) then env else [env] },
              '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
              withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
              '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
              withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
              '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
              withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
              '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
              withImage(image): { image: image },
              '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
              withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
              withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
              '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
              withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
              '#withResizePolicy':: d.fn(help='', args=[d.arg(name='resizePolicy', type=d.T.array)]),
              withResizePolicy(resizePolicy): { resizePolicy: if std.isArray(v=resizePolicy) then resizePolicy else [resizePolicy] },
              '#withResizePolicyMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='resizePolicy', type=d.T.array)]),
              withResizePolicyMixin(resizePolicy): { resizePolicy+: if std.isArray(v=resizePolicy) then resizePolicy else [resizePolicy] },
              '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
              withRestartPolicy(restartPolicy): { restartPolicy: restartPolicy },
              '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
              withStdin(stdin): { stdin: stdin },
              '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
              withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
              '#withTargetContainerName':: d.fn(help='', args=[d.arg(name='targetContainerName', type=d.T.string)]),
              withTargetContainerName(targetContainerName): { targetContainerName: targetContainerName },
              '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
              withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
              '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
              withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
              '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
              withTty(tty): { tty: tty },
              '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
              withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
              '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
              withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
              '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
              withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
              '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
              withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
              '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
              withWorkingDir(workingDir): { workingDir: workingDir },
            },
            '#hostAliases':: d.obj(help=''),
            hostAliases: {
              '#withHostnames':: d.fn(help='', args=[d.arg(name='hostnames', type=d.T.array)]),
              withHostnames(hostnames): { hostnames: if std.isArray(v=hostnames) then hostnames else [hostnames] },
              '#withHostnamesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hostnames', type=d.T.array)]),
              withHostnamesMixin(hostnames): { hostnames+: if std.isArray(v=hostnames) then hostnames else [hostnames] },
              '#withIp':: d.fn(help='', args=[d.arg(name='ip', type=d.T.string)]),
              withIp(ip): { ip: ip },
            },
            '#imagePullSecrets':: d.obj(help=''),
            imagePullSecrets: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
            },
            '#initContainers':: d.obj(help=''),
            initContainers: {
              '#env':: d.obj(help=''),
              env: {
                '#valueFrom':: d.obj(help=''),
                valueFrom: {
                  '#configMapKeyRef':: d.obj(help=''),
                  configMapKeyRef: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
                    '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                    withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
                  },
                  '#fieldRef':: d.obj(help=''),
                  fieldRef: {
                    '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                    withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
                    '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                    withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
                  },
                  '#resourceFieldRef':: d.obj(help=''),
                  resourceFieldRef: {
                    '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                    withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
                    '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                    withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
                    '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                    withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
                  },
                  '#secretKeyRef':: d.obj(help=''),
                  secretKeyRef: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
                    '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                    withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
                  },
                },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#envFrom':: d.obj(help=''),
              envFrom: {
                '#configMapRef':: d.obj(help=''),
                configMapRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { configMapRef+: { name: name } },
                  '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                  withOptional(optional): { configMapRef+: { optional: optional } },
                },
                '#secretRef':: d.obj(help=''),
                secretRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { secretRef+: { name: name } },
                  '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                  withOptional(optional): { secretRef+: { optional: optional } },
                },
                '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
                withPrefix(prefix): { prefix: prefix },
              },
              '#lifecycle':: d.obj(help=''),
              lifecycle: {
                '#postStart':: d.obj(help=''),
                postStart: {
                  '#exec':: d.obj(help=''),
                  exec: {
                    '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                    withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                    '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                    withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
                  },
                  '#httpGet':: d.obj(help=''),
                  httpGet: {
                    '#httpHeaders':: d.obj(help=''),
                    httpHeaders: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                    withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
                    '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                    withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                    '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                    withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                    '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                    withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
                    '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                    withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
                    '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                    withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
                  },
                  '#sleep':: d.obj(help=''),
                  sleep: {
                    '#withSeconds':: d.fn(help='', args=[d.arg(name='seconds', type=d.T.integer)]),
                    withSeconds(seconds): { lifecycle+: { postStart+: { sleep+: { seconds: seconds } } } },
                  },
                  '#tcpSocket':: d.obj(help=''),
                  tcpSocket: {
                    '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                    withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
                    '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                    withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
                  },
                },
                '#preStop':: d.obj(help=''),
                preStop: {
                  '#exec':: d.obj(help=''),
                  exec: {
                    '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                    withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                    '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                    withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
                  },
                  '#httpGet':: d.obj(help=''),
                  httpGet: {
                    '#httpHeaders':: d.obj(help=''),
                    httpHeaders: {
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { name: name },
                      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                      withValue(value): { value: value },
                    },
                    '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                    withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
                    '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                    withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                    '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                    withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                    '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                    withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
                    '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                    withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
                    '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                    withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
                  },
                  '#sleep':: d.obj(help=''),
                  sleep: {
                    '#withSeconds':: d.fn(help='', args=[d.arg(name='seconds', type=d.T.integer)]),
                    withSeconds(seconds): { lifecycle+: { preStop+: { sleep+: { seconds: seconds } } } },
                  },
                  '#tcpSocket':: d.obj(help=''),
                  tcpSocket: {
                    '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                    withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
                    '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                    withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
                  },
                },
              },
              '#livenessProbe':: d.obj(help=''),
              livenessProbe: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
                },
                '#grpc':: d.obj(help=''),
                grpc: {
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                  withPort(port): { livenessProbe+: { grpc+: { port: port } } },
                  '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                  withService(service): { livenessProbe+: { grpc+: { service: service } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
                },
                '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
                withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
                '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
                withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
                '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
                withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
                '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
                withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
                '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
                withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
                '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
                withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
              },
              '#ports':: d.obj(help=''),
              ports: {
                '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
                withContainerPort(containerPort): { containerPort: containerPort },
                '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
                withHostIP(hostIP): { hostIP: hostIP },
                '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
                withHostPort(hostPort): { hostPort: hostPort },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
                withProtocol(protocol): { protocol: protocol },
              },
              '#readinessProbe':: d.obj(help=''),
              readinessProbe: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
                },
                '#grpc':: d.obj(help=''),
                grpc: {
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                  withPort(port): { readinessProbe+: { grpc+: { port: port } } },
                  '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                  withService(service): { readinessProbe+: { grpc+: { service: service } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
                },
                '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
                withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
                '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
                withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
                '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
                withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
                '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
                withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
                '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
                withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
                '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
                withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
              },
              '#resizePolicy':: d.obj(help=''),
              resizePolicy: {
                '#withResourceName':: d.fn(help='', args=[d.arg(name='resourceName', type=d.T.string)]),
                withResourceName(resourceName): { resourceName: resourceName },
                '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
                withRestartPolicy(restartPolicy): { restartPolicy: restartPolicy },
              },
              '#resources':: d.obj(help=''),
              resources: {
                '#claims':: d.obj(help=''),
                claims: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                },
                '#withClaims':: d.fn(help='', args=[d.arg(name='claims', type=d.T.array)]),
                withClaims(claims): { resources+: { claims: if std.isArray(v=claims) then claims else [claims] } },
                '#withClaimsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='claims', type=d.T.array)]),
                withClaimsMixin(claims): { resources+: { claims+: if std.isArray(v=claims) then claims else [claims] } },
                '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
                withLimits(limits): { resources+: { limits: limits } },
                '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
                withLimitsMixin(limits): { resources+: { limits+: limits } },
                '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
                withRequests(requests): { resources+: { requests: requests } },
                '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
                withRequestsMixin(requests): { resources+: { requests+: requests } },
              },
              '#securityContext':: d.obj(help=''),
              securityContext: {
                '#appArmorProfile':: d.obj(help=''),
                appArmorProfile: {
                  '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
                  withLocalhostProfile(localhostProfile): { securityContext+: { appArmorProfile+: { localhostProfile: localhostProfile } } },
                  '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                  withType(type): { securityContext+: { appArmorProfile+: { type: type } } },
                },
                '#capabilities':: d.obj(help=''),
                capabilities: {
                  '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
                  withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
                  '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
                  withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
                  '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
                  withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
                  '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
                  withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
                },
                '#seLinuxOptions':: d.obj(help=''),
                seLinuxOptions: {
                  '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
                  withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
                  '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
                  withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
                  '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                  withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
                  '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
                  withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
                },
                '#seccompProfile':: d.obj(help=''),
                seccompProfile: {
                  '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
                  withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
                  '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                  withType(type): { securityContext+: { seccompProfile+: { type: type } } },
                },
                '#windowsOptions':: d.obj(help=''),
                windowsOptions: {
                  '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
                  withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
                  '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
                  withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
                  '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
                  withHostProcess(hostProcess): { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } },
                  '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
                  withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
                },
                '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
                withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
                '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
                withPrivileged(privileged): { securityContext+: { privileged: privileged } },
                '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
                withProcMount(procMount): { securityContext+: { procMount: procMount } },
                '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
                withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
                '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
                withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
                '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
                withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
                '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
                withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
              },
              '#startupProbe':: d.obj(help=''),
              startupProbe: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
                },
                '#grpc':: d.obj(help=''),
                grpc: {
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                  withPort(port): { startupProbe+: { grpc+: { port: port } } },
                  '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                  withService(service): { startupProbe+: { grpc+: { service: service } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { startupProbe+: { httpGet+: { host: host } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { startupProbe+: { httpGet+: { path: path } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { startupProbe+: { httpGet+: { port: port } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
                },
                '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
                withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
                '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
                withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
                '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
                withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
                '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
                withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
                '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
                withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
                '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
                withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
              },
              '#volumeDevices':: d.obj(help=''),
              volumeDevices: {
                '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
                withDevicePath(devicePath): { devicePath: devicePath },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
              },
              '#volumeMounts':: d.obj(help=''),
              volumeMounts: {
                '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
                withMountPath(mountPath): { mountPath: mountPath },
                '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
                withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { readOnly: readOnly },
                '#withRecursiveReadOnly':: d.fn(help='', args=[d.arg(name='recursiveReadOnly', type=d.T.string)]),
                withRecursiveReadOnly(recursiveReadOnly): { recursiveReadOnly: recursiveReadOnly },
                '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
                withSubPath(subPath): { subPath: subPath },
                '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
                withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
              },
              '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
              withArgs(args): { args: if std.isArray(v=args) then args else [args] },
              '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
              withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { command: if std.isArray(v=command) then command else [command] },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
              '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
              withEnv(env): { env: if std.isArray(v=env) then env else [env] },
              '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
              withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
              '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
              withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
              '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
              withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
              '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
              withImage(image): { image: image },
              '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
              withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
              withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
              '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
              withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
              '#withResizePolicy':: d.fn(help='', args=[d.arg(name='resizePolicy', type=d.T.array)]),
              withResizePolicy(resizePolicy): { resizePolicy: if std.isArray(v=resizePolicy) then resizePolicy else [resizePolicy] },
              '#withResizePolicyMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='resizePolicy', type=d.T.array)]),
              withResizePolicyMixin(resizePolicy): { resizePolicy+: if std.isArray(v=resizePolicy) then resizePolicy else [resizePolicy] },
              '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
              withRestartPolicy(restartPolicy): { restartPolicy: restartPolicy },
              '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
              withStdin(stdin): { stdin: stdin },
              '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
              withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
              '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
              withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
              '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
              withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
              '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
              withTty(tty): { tty: tty },
              '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
              withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
              '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
              withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
              '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
              withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
              '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
              withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
              '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
              withWorkingDir(workingDir): { workingDir: workingDir },
            },
            '#os':: d.obj(help=''),
            os: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { deployment+: { spec+: { template+: { spec+: { os+: { name: name } } } } } } },
            },
            '#readinessGates':: d.obj(help=''),
            readinessGates: {
              '#withConditionType':: d.fn(help='', args=[d.arg(name='conditionType', type=d.T.string)]),
              withConditionType(conditionType): { conditionType: conditionType },
            },
            '#securityContext':: d.obj(help=''),
            securityContext: {
              '#appArmorProfile':: d.obj(help=''),
              appArmorProfile: {
                '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
                withLocalhostProfile(localhostProfile): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { appArmorProfile+: { localhostProfile: localhostProfile } } } } } } } },
                '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                withType(type): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { appArmorProfile+: { type: type } } } } } } } },
              },
              '#seLinuxOptions':: d.obj(help=''),
              seLinuxOptions: {
                '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
                withLevel(level): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } } },
                '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
                withRole(role): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } } },
                '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                withType(type): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } } },
                '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
                withUser(user): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } } },
              },
              '#seccompProfile':: d.obj(help=''),
              seccompProfile: {
                '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
                withLocalhostProfile(localhostProfile): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } } },
                '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                withType(type): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { seccompProfile+: { type: type } } } } } } } },
              },
              '#sysctls':: d.obj(help=''),
              sysctls: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#windowsOptions':: d.obj(help=''),
              windowsOptions: {
                '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
                withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } } },
                '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
                withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } } },
                '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
                withHostProcess(hostProcess): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } } } } } } },
                '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
                withRunAsUserName(runAsUserName): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } } },
              },
              '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
              withFsGroup(fsGroup): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { fsGroup: fsGroup } } } } } } },
              '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
              withFsGroupChangePolicy(fsGroupChangePolicy): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } } } } } },
              '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
              withRunAsGroup(runAsGroup): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { runAsGroup: runAsGroup } } } } } } },
              '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
              withRunAsNonRoot(runAsNonRoot): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } } },
              '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
              withRunAsUser(runAsUser): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { runAsUser: runAsUser } } } } } } },
              '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
              withSupplementalGroups(supplementalGroups): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } } },
              '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
              withSupplementalGroupsMixin(supplementalGroups): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } } },
              '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
              withSysctls(sysctls): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } } },
              '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
              withSysctlsMixin(sysctls): { spec+: { deployment+: { spec+: { template+: { spec+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } } },
            },
            '#tolerations':: d.obj(help=''),
            tolerations: {
              '#withEffect':: d.fn(help='', args=[d.arg(name='effect', type=d.T.string)]),
              withEffect(effect): { effect: effect },
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withTolerationSeconds':: d.fn(help='', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
              withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#topologySpreadConstraints':: d.obj(help=''),
            topologySpreadConstraints: {
              '#labelSelector':: d.obj(help=''),
              labelSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
              },
              '#withMatchLabelKeys':: d.fn(help='', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
              withMatchLabelKeys(matchLabelKeys): { matchLabelKeys: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
              '#withMatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
              withMatchLabelKeysMixin(matchLabelKeys): { matchLabelKeys+: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
              '#withMaxSkew':: d.fn(help='', args=[d.arg(name='maxSkew', type=d.T.integer)]),
              withMaxSkew(maxSkew): { maxSkew: maxSkew },
              '#withMinDomains':: d.fn(help='', args=[d.arg(name='minDomains', type=d.T.integer)]),
              withMinDomains(minDomains): { minDomains: minDomains },
              '#withNodeAffinityPolicy':: d.fn(help='', args=[d.arg(name='nodeAffinityPolicy', type=d.T.string)]),
              withNodeAffinityPolicy(nodeAffinityPolicy): { nodeAffinityPolicy: nodeAffinityPolicy },
              '#withNodeTaintsPolicy':: d.fn(help='', args=[d.arg(name='nodeTaintsPolicy', type=d.T.string)]),
              withNodeTaintsPolicy(nodeTaintsPolicy): { nodeTaintsPolicy: nodeTaintsPolicy },
              '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
              withTopologyKey(topologyKey): { topologyKey: topologyKey },
              '#withWhenUnsatisfiable':: d.fn(help='', args=[d.arg(name='whenUnsatisfiable', type=d.T.string)]),
              withWhenUnsatisfiable(whenUnsatisfiable): { whenUnsatisfiable: whenUnsatisfiable },
            },
            '#volumes':: d.obj(help=''),
            volumes: {
              '#awsElasticBlockStore':: d.obj(help=''),
              awsElasticBlockStore: {
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { awsElasticBlockStore+: { fsType: fsType } },
                '#withPartition':: d.fn(help='', args=[d.arg(name='partition', type=d.T.integer)]),
                withPartition(partition): { awsElasticBlockStore+: { partition: partition } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { awsElasticBlockStore+: { readOnly: readOnly } },
                '#withVolumeID':: d.fn(help='', args=[d.arg(name='volumeID', type=d.T.string)]),
                withVolumeID(volumeID): { awsElasticBlockStore+: { volumeID: volumeID } },
              },
              '#azureDisk':: d.obj(help=''),
              azureDisk: {
                '#withCachingMode':: d.fn(help='', args=[d.arg(name='cachingMode', type=d.T.string)]),
                withCachingMode(cachingMode): { azureDisk+: { cachingMode: cachingMode } },
                '#withDiskName':: d.fn(help='', args=[d.arg(name='diskName', type=d.T.string)]),
                withDiskName(diskName): { azureDisk+: { diskName: diskName } },
                '#withDiskURI':: d.fn(help='', args=[d.arg(name='diskURI', type=d.T.string)]),
                withDiskURI(diskURI): { azureDisk+: { diskURI: diskURI } },
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { azureDisk+: { fsType: fsType } },
                '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                withKind(kind): { azureDisk+: { kind: kind } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { azureDisk+: { readOnly: readOnly } },
              },
              '#azureFile':: d.obj(help=''),
              azureFile: {
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { azureFile+: { readOnly: readOnly } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { azureFile+: { secretName: secretName } },
                '#withShareName':: d.fn(help='', args=[d.arg(name='shareName', type=d.T.string)]),
                withShareName(shareName): { azureFile+: { shareName: shareName } },
              },
              '#cephfs':: d.obj(help=''),
              cephfs: {
                '#secretRef':: d.obj(help=''),
                secretRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { cephfs+: { secretRef+: { name: name } } },
                },
                '#withMonitors':: d.fn(help='', args=[d.arg(name='monitors', type=d.T.array)]),
                withMonitors(monitors): { cephfs+: { monitors: if std.isArray(v=monitors) then monitors else [monitors] } },
                '#withMonitorsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='monitors', type=d.T.array)]),
                withMonitorsMixin(monitors): { cephfs+: { monitors+: if std.isArray(v=monitors) then monitors else [monitors] } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { cephfs+: { path: path } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { cephfs+: { readOnly: readOnly } },
                '#withSecretFile':: d.fn(help='', args=[d.arg(name='secretFile', type=d.T.string)]),
                withSecretFile(secretFile): { cephfs+: { secretFile: secretFile } },
                '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
                withUser(user): { cephfs+: { user: user } },
              },
              '#cinder':: d.obj(help=''),
              cinder: {
                '#secretRef':: d.obj(help=''),
                secretRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { cinder+: { secretRef+: { name: name } } },
                },
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { cinder+: { fsType: fsType } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { cinder+: { readOnly: readOnly } },
                '#withVolumeID':: d.fn(help='', args=[d.arg(name='volumeID', type=d.T.string)]),
                withVolumeID(volumeID): { cinder+: { volumeID: volumeID } },
              },
              '#configMap':: d.obj(help=''),
              configMap: {
                '#items':: d.obj(help=''),
                items: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
                  withMode(mode): { mode: mode },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
                withDefaultMode(defaultMode): { configMap+: { defaultMode: defaultMode } },
                '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
                withItems(items): { configMap+: { items: if std.isArray(v=items) then items else [items] } },
                '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
                withItemsMixin(items): { configMap+: { items+: if std.isArray(v=items) then items else [items] } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { configMap+: { name: name } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { configMap+: { optional: optional } },
              },
              '#csi':: d.obj(help=''),
              csi: {
                '#nodePublishSecretRef':: d.obj(help=''),
                nodePublishSecretRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { csi+: { nodePublishSecretRef+: { name: name } } },
                },
                '#withDriver':: d.fn(help='', args=[d.arg(name='driver', type=d.T.string)]),
                withDriver(driver): { csi+: { driver: driver } },
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { csi+: { fsType: fsType } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { csi+: { readOnly: readOnly } },
                '#withVolumeAttributes':: d.fn(help='', args=[d.arg(name='volumeAttributes', type=d.T.object)]),
                withVolumeAttributes(volumeAttributes): { csi+: { volumeAttributes: volumeAttributes } },
                '#withVolumeAttributesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeAttributes', type=d.T.object)]),
                withVolumeAttributesMixin(volumeAttributes): { csi+: { volumeAttributes+: volumeAttributes } },
              },
              '#downwardAPI':: d.obj(help=''),
              downwardAPI: {
                '#items':: d.obj(help=''),
                items: {
                  '#fieldRef':: d.obj(help=''),
                  fieldRef: {
                    '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                    withApiVersion(apiVersion): { fieldRef+: { apiVersion: apiVersion } },
                    '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                    withFieldPath(fieldPath): { fieldRef+: { fieldPath: fieldPath } },
                  },
                  '#resourceFieldRef':: d.obj(help=''),
                  resourceFieldRef: {
                    '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                    withContainerName(containerName): { resourceFieldRef+: { containerName: containerName } },
                    '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                    withDivisor(divisor): { resourceFieldRef+: { divisor: divisor } },
                    '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                    withResource(resource): { resourceFieldRef+: { resource: resource } },
                  },
                  '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
                  withMode(mode): { mode: mode },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
                withDefaultMode(defaultMode): { downwardAPI+: { defaultMode: defaultMode } },
                '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
                withItems(items): { downwardAPI+: { items: if std.isArray(v=items) then items else [items] } },
                '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
                withItemsMixin(items): { downwardAPI+: { items+: if std.isArray(v=items) then items else [items] } },
              },
              '#emptyDir':: d.obj(help=''),
              emptyDir: {
                '#withMedium':: d.fn(help='', args=[d.arg(name='medium', type=d.T.string)]),
                withMedium(medium): { emptyDir+: { medium: medium } },
                '#withSizeLimit':: d.fn(help='', args=[d.arg(name='sizeLimit', type=d.T.any)]),
                withSizeLimit(sizeLimit): { emptyDir+: { sizeLimit: sizeLimit } },
              },
              '#ephemeral':: d.obj(help=''),
              ephemeral: {
                '#volumeClaimTemplate':: d.obj(help=''),
                volumeClaimTemplate: {
                  '#spec':: d.obj(help=''),
                  spec: {
                    '#dataSource':: d.obj(help=''),
                    dataSource: {
                      '#withApiGroup':: d.fn(help='', args=[d.arg(name='apiGroup', type=d.T.string)]),
                      withApiGroup(apiGroup): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSource+: { apiGroup: apiGroup } } } } },
                      '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                      withKind(kind): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSource+: { kind: kind } } } } },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSource+: { name: name } } } } },
                    },
                    '#dataSourceRef':: d.obj(help=''),
                    dataSourceRef: {
                      '#withApiGroup':: d.fn(help='', args=[d.arg(name='apiGroup', type=d.T.string)]),
                      withApiGroup(apiGroup): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSourceRef+: { apiGroup: apiGroup } } } } },
                      '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                      withKind(kind): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSourceRef+: { kind: kind } } } } },
                      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                      withName(name): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSourceRef+: { name: name } } } } },
                      '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
                      withNamespace(namespace): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSourceRef+: { namespace: namespace } } } } },
                    },
                    '#resources':: d.obj(help=''),
                    resources: {
                      '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
                      withLimits(limits): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { limits: limits } } } } },
                      '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
                      withLimitsMixin(limits): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { limits+: limits } } } } },
                      '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
                      withRequests(requests): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { requests: requests } } } } },
                      '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
                      withRequestsMixin(requests): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { requests+: requests } } } } },
                    },
                    '#selector':: d.obj(help=''),
                    selector: {
                      '#matchExpressions':: d.obj(help=''),
                      matchExpressions: {
                        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                        withKey(key): { key: key },
                        '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                        withOperator(operator): { operator: operator },
                        '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                        withValues(values): { values: if std.isArray(v=values) then values else [values] },
                        '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                        withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                      },
                      '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                      withMatchExpressions(matchExpressions): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } },
                      '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                      withMatchExpressionsMixin(matchExpressions): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } },
                      '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                      withMatchLabels(matchLabels): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchLabels: matchLabels } } } } },
                      '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                      withMatchLabelsMixin(matchLabels): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchLabels+: matchLabels } } } } },
                    },
                    '#withAccessModes':: d.fn(help='', args=[d.arg(name='accessModes', type=d.T.array)]),
                    withAccessModes(accessModes): { ephemeral+: { volumeClaimTemplate+: { spec+: { accessModes: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } },
                    '#withAccessModesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='accessModes', type=d.T.array)]),
                    withAccessModesMixin(accessModes): { ephemeral+: { volumeClaimTemplate+: { spec+: { accessModes+: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } },
                    '#withStorageClassName':: d.fn(help='', args=[d.arg(name='storageClassName', type=d.T.string)]),
                    withStorageClassName(storageClassName): { ephemeral+: { volumeClaimTemplate+: { spec+: { storageClassName: storageClassName } } } },
                    '#withVolumeAttributesClassName':: d.fn(help='', args=[d.arg(name='volumeAttributesClassName', type=d.T.string)]),
                    withVolumeAttributesClassName(volumeAttributesClassName): { ephemeral+: { volumeClaimTemplate+: { spec+: { volumeAttributesClassName: volumeAttributesClassName } } } },
                    '#withVolumeMode':: d.fn(help='', args=[d.arg(name='volumeMode', type=d.T.string)]),
                    withVolumeMode(volumeMode): { ephemeral+: { volumeClaimTemplate+: { spec+: { volumeMode: volumeMode } } } },
                    '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
                    withVolumeName(volumeName): { ephemeral+: { volumeClaimTemplate+: { spec+: { volumeName: volumeName } } } },
                  },
                  '#withMetadata':: d.fn(help='', args=[d.arg(name='metadata', type=d.T.object)]),
                  withMetadata(metadata): { ephemeral+: { volumeClaimTemplate+: { metadata: metadata } } },
                  '#withMetadataMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='metadata', type=d.T.object)]),
                  withMetadataMixin(metadata): { ephemeral+: { volumeClaimTemplate+: { metadata+: metadata } } },
                },
              },
              '#fc':: d.obj(help=''),
              fc: {
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { fc+: { fsType: fsType } },
                '#withLun':: d.fn(help='', args=[d.arg(name='lun', type=d.T.integer)]),
                withLun(lun): { fc+: { lun: lun } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { fc+: { readOnly: readOnly } },
                '#withTargetWWNs':: d.fn(help='', args=[d.arg(name='targetWWNs', type=d.T.array)]),
                withTargetWWNs(targetWWNs): { fc+: { targetWWNs: if std.isArray(v=targetWWNs) then targetWWNs else [targetWWNs] } },
                '#withTargetWWNsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='targetWWNs', type=d.T.array)]),
                withTargetWWNsMixin(targetWWNs): { fc+: { targetWWNs+: if std.isArray(v=targetWWNs) then targetWWNs else [targetWWNs] } },
                '#withWwids':: d.fn(help='', args=[d.arg(name='wwids', type=d.T.array)]),
                withWwids(wwids): { fc+: { wwids: if std.isArray(v=wwids) then wwids else [wwids] } },
                '#withWwidsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='wwids', type=d.T.array)]),
                withWwidsMixin(wwids): { fc+: { wwids+: if std.isArray(v=wwids) then wwids else [wwids] } },
              },
              '#flexVolume':: d.obj(help=''),
              flexVolume: {
                '#secretRef':: d.obj(help=''),
                secretRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { flexVolume+: { secretRef+: { name: name } } },
                },
                '#withDriver':: d.fn(help='', args=[d.arg(name='driver', type=d.T.string)]),
                withDriver(driver): { flexVolume+: { driver: driver } },
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { flexVolume+: { fsType: fsType } },
                '#withOptions':: d.fn(help='', args=[d.arg(name='options', type=d.T.object)]),
                withOptions(options): { flexVolume+: { options: options } },
                '#withOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='options', type=d.T.object)]),
                withOptionsMixin(options): { flexVolume+: { options+: options } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { flexVolume+: { readOnly: readOnly } },
              },
              '#flocker':: d.obj(help=''),
              flocker: {
                '#withDatasetName':: d.fn(help='', args=[d.arg(name='datasetName', type=d.T.string)]),
                withDatasetName(datasetName): { flocker+: { datasetName: datasetName } },
                '#withDatasetUUID':: d.fn(help='', args=[d.arg(name='datasetUUID', type=d.T.string)]),
                withDatasetUUID(datasetUUID): { flocker+: { datasetUUID: datasetUUID } },
              },
              '#gcePersistentDisk':: d.obj(help=''),
              gcePersistentDisk: {
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { gcePersistentDisk+: { fsType: fsType } },
                '#withPartition':: d.fn(help='', args=[d.arg(name='partition', type=d.T.integer)]),
                withPartition(partition): { gcePersistentDisk+: { partition: partition } },
                '#withPdName':: d.fn(help='', args=[d.arg(name='pdName', type=d.T.string)]),
                withPdName(pdName): { gcePersistentDisk+: { pdName: pdName } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { gcePersistentDisk+: { readOnly: readOnly } },
              },
              '#gitRepo':: d.obj(help=''),
              gitRepo: {
                '#withDirectory':: d.fn(help='', args=[d.arg(name='directory', type=d.T.string)]),
                withDirectory(directory): { gitRepo+: { directory: directory } },
                '#withRepository':: d.fn(help='', args=[d.arg(name='repository', type=d.T.string)]),
                withRepository(repository): { gitRepo+: { repository: repository } },
                '#withRevision':: d.fn(help='', args=[d.arg(name='revision', type=d.T.string)]),
                withRevision(revision): { gitRepo+: { revision: revision } },
              },
              '#glusterfs':: d.obj(help=''),
              glusterfs: {
                '#withEndpoints':: d.fn(help='', args=[d.arg(name='endpoints', type=d.T.string)]),
                withEndpoints(endpoints): { glusterfs+: { endpoints: endpoints } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { glusterfs+: { path: path } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { glusterfs+: { readOnly: readOnly } },
              },
              '#hostPath':: d.obj(help=''),
              hostPath: {
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { hostPath+: { path: path } },
                '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                withType(type): { hostPath+: { type: type } },
              },
              '#iscsi':: d.obj(help=''),
              iscsi: {
                '#secretRef':: d.obj(help=''),
                secretRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { iscsi+: { secretRef+: { name: name } } },
                },
                '#withChapAuthDiscovery':: d.fn(help='', args=[d.arg(name='chapAuthDiscovery', type=d.T.boolean)]),
                withChapAuthDiscovery(chapAuthDiscovery): { iscsi+: { chapAuthDiscovery: chapAuthDiscovery } },
                '#withChapAuthSession':: d.fn(help='', args=[d.arg(name='chapAuthSession', type=d.T.boolean)]),
                withChapAuthSession(chapAuthSession): { iscsi+: { chapAuthSession: chapAuthSession } },
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { iscsi+: { fsType: fsType } },
                '#withInitiatorName':: d.fn(help='', args=[d.arg(name='initiatorName', type=d.T.string)]),
                withInitiatorName(initiatorName): { iscsi+: { initiatorName: initiatorName } },
                '#withIqn':: d.fn(help='', args=[d.arg(name='iqn', type=d.T.string)]),
                withIqn(iqn): { iscsi+: { iqn: iqn } },
                '#withIscsiInterface':: d.fn(help='', args=[d.arg(name='iscsiInterface', type=d.T.string)]),
                withIscsiInterface(iscsiInterface): { iscsi+: { iscsiInterface: iscsiInterface } },
                '#withLun':: d.fn(help='', args=[d.arg(name='lun', type=d.T.integer)]),
                withLun(lun): { iscsi+: { lun: lun } },
                '#withPortals':: d.fn(help='', args=[d.arg(name='portals', type=d.T.array)]),
                withPortals(portals): { iscsi+: { portals: if std.isArray(v=portals) then portals else [portals] } },
                '#withPortalsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='portals', type=d.T.array)]),
                withPortalsMixin(portals): { iscsi+: { portals+: if std.isArray(v=portals) then portals else [portals] } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { iscsi+: { readOnly: readOnly } },
                '#withTargetPortal':: d.fn(help='', args=[d.arg(name='targetPortal', type=d.T.string)]),
                withTargetPortal(targetPortal): { iscsi+: { targetPortal: targetPortal } },
              },
              '#nfs':: d.obj(help=''),
              nfs: {
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { nfs+: { path: path } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { nfs+: { readOnly: readOnly } },
                '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
                withServer(server): { nfs+: { server: server } },
              },
              '#persistentVolumeClaim':: d.obj(help=''),
              persistentVolumeClaim: {
                '#withClaimName':: d.fn(help='', args=[d.arg(name='claimName', type=d.T.string)]),
                withClaimName(claimName): { persistentVolumeClaim+: { claimName: claimName } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { persistentVolumeClaim+: { readOnly: readOnly } },
              },
              '#photonPersistentDisk':: d.obj(help=''),
              photonPersistentDisk: {
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { photonPersistentDisk+: { fsType: fsType } },
                '#withPdID':: d.fn(help='', args=[d.arg(name='pdID', type=d.T.string)]),
                withPdID(pdID): { photonPersistentDisk+: { pdID: pdID } },
              },
              '#portworxVolume':: d.obj(help=''),
              portworxVolume: {
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { portworxVolume+: { fsType: fsType } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { portworxVolume+: { readOnly: readOnly } },
                '#withVolumeID':: d.fn(help='', args=[d.arg(name='volumeID', type=d.T.string)]),
                withVolumeID(volumeID): { portworxVolume+: { volumeID: volumeID } },
              },
              '#projected':: d.obj(help=''),
              projected: {
                '#sources':: d.obj(help=''),
                sources: {
                  '#clusterTrustBundle':: d.obj(help=''),
                  clusterTrustBundle: {
                    '#labelSelector':: d.obj(help=''),
                    labelSelector: {
                      '#matchExpressions':: d.obj(help=''),
                      matchExpressions: {
                        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                        withKey(key): { key: key },
                        '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                        withOperator(operator): { operator: operator },
                        '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                        withValues(values): { values: if std.isArray(v=values) then values else [values] },
                        '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                        withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                      },
                      '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                      withMatchExpressions(matchExpressions): { clusterTrustBundle+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                      '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                      withMatchExpressionsMixin(matchExpressions): { clusterTrustBundle+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                      '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                      withMatchLabels(matchLabels): { clusterTrustBundle+: { labelSelector+: { matchLabels: matchLabels } } },
                      '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                      withMatchLabelsMixin(matchLabels): { clusterTrustBundle+: { labelSelector+: { matchLabels+: matchLabels } } },
                    },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { clusterTrustBundle+: { name: name } },
                    '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                    withOptional(optional): { clusterTrustBundle+: { optional: optional } },
                    '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                    withPath(path): { clusterTrustBundle+: { path: path } },
                    '#withSignerName':: d.fn(help='', args=[d.arg(name='signerName', type=d.T.string)]),
                    withSignerName(signerName): { clusterTrustBundle+: { signerName: signerName } },
                  },
                  '#configMap':: d.obj(help=''),
                  configMap: {
                    '#items':: d.obj(help=''),
                    items: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
                      withMode(mode): { mode: mode },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
                    withItems(items): { configMap+: { items: if std.isArray(v=items) then items else [items] } },
                    '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
                    withItemsMixin(items): { configMap+: { items+: if std.isArray(v=items) then items else [items] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { configMap+: { name: name } },
                    '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                    withOptional(optional): { configMap+: { optional: optional } },
                  },
                  '#downwardAPI':: d.obj(help=''),
                  downwardAPI: {
                    '#items':: d.obj(help=''),
                    items: {
                      '#fieldRef':: d.obj(help=''),
                      fieldRef: {
                        '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                        withApiVersion(apiVersion): { fieldRef+: { apiVersion: apiVersion } },
                        '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                        withFieldPath(fieldPath): { fieldRef+: { fieldPath: fieldPath } },
                      },
                      '#resourceFieldRef':: d.obj(help=''),
                      resourceFieldRef: {
                        '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                        withContainerName(containerName): { resourceFieldRef+: { containerName: containerName } },
                        '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                        withDivisor(divisor): { resourceFieldRef+: { divisor: divisor } },
                        '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                        withResource(resource): { resourceFieldRef+: { resource: resource } },
                      },
                      '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
                      withMode(mode): { mode: mode },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
                    withItems(items): { downwardAPI+: { items: if std.isArray(v=items) then items else [items] } },
                    '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
                    withItemsMixin(items): { downwardAPI+: { items+: if std.isArray(v=items) then items else [items] } },
                  },
                  '#secret':: d.obj(help=''),
                  secret: {
                    '#items':: d.obj(help=''),
                    items: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
                      withMode(mode): { mode: mode },
                      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                      withPath(path): { path: path },
                    },
                    '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
                    withItems(items): { secret+: { items: if std.isArray(v=items) then items else [items] } },
                    '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
                    withItemsMixin(items): { secret+: { items+: if std.isArray(v=items) then items else [items] } },
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { secret+: { name: name } },
                    '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                    withOptional(optional): { secret+: { optional: optional } },
                  },
                  '#serviceAccountToken':: d.obj(help=''),
                  serviceAccountToken: {
                    '#withAudience':: d.fn(help='', args=[d.arg(name='audience', type=d.T.string)]),
                    withAudience(audience): { serviceAccountToken+: { audience: audience } },
                    '#withExpirationSeconds':: d.fn(help='', args=[d.arg(name='expirationSeconds', type=d.T.integer)]),
                    withExpirationSeconds(expirationSeconds): { serviceAccountToken+: { expirationSeconds: expirationSeconds } },
                    '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                    withPath(path): { serviceAccountToken+: { path: path } },
                  },
                },
                '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
                withDefaultMode(defaultMode): { projected+: { defaultMode: defaultMode } },
                '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
                withSources(sources): { projected+: { sources: if std.isArray(v=sources) then sources else [sources] } },
                '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
                withSourcesMixin(sources): { projected+: { sources+: if std.isArray(v=sources) then sources else [sources] } },
              },
              '#quobyte':: d.obj(help=''),
              quobyte: {
                '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
                withGroup(group): { quobyte+: { group: group } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { quobyte+: { readOnly: readOnly } },
                '#withRegistry':: d.fn(help='', args=[d.arg(name='registry', type=d.T.string)]),
                withRegistry(registry): { quobyte+: { registry: registry } },
                '#withTenant':: d.fn(help='', args=[d.arg(name='tenant', type=d.T.string)]),
                withTenant(tenant): { quobyte+: { tenant: tenant } },
                '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
                withUser(user): { quobyte+: { user: user } },
                '#withVolume':: d.fn(help='', args=[d.arg(name='volume', type=d.T.string)]),
                withVolume(volume): { quobyte+: { volume: volume } },
              },
              '#rbd':: d.obj(help=''),
              rbd: {
                '#secretRef':: d.obj(help=''),
                secretRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { rbd+: { secretRef+: { name: name } } },
                },
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { rbd+: { fsType: fsType } },
                '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
                withImage(image): { rbd+: { image: image } },
                '#withKeyring':: d.fn(help='', args=[d.arg(name='keyring', type=d.T.string)]),
                withKeyring(keyring): { rbd+: { keyring: keyring } },
                '#withMonitors':: d.fn(help='', args=[d.arg(name='monitors', type=d.T.array)]),
                withMonitors(monitors): { rbd+: { monitors: if std.isArray(v=monitors) then monitors else [monitors] } },
                '#withMonitorsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='monitors', type=d.T.array)]),
                withMonitorsMixin(monitors): { rbd+: { monitors+: if std.isArray(v=monitors) then monitors else [monitors] } },
                '#withPool':: d.fn(help='', args=[d.arg(name='pool', type=d.T.string)]),
                withPool(pool): { rbd+: { pool: pool } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { rbd+: { readOnly: readOnly } },
                '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
                withUser(user): { rbd+: { user: user } },
              },
              '#scaleIO':: d.obj(help=''),
              scaleIO: {
                '#secretRef':: d.obj(help=''),
                secretRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { scaleIO+: { secretRef+: { name: name } } },
                },
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { scaleIO+: { fsType: fsType } },
                '#withGateway':: d.fn(help='', args=[d.arg(name='gateway', type=d.T.string)]),
                withGateway(gateway): { scaleIO+: { gateway: gateway } },
                '#withProtectionDomain':: d.fn(help='', args=[d.arg(name='protectionDomain', type=d.T.string)]),
                withProtectionDomain(protectionDomain): { scaleIO+: { protectionDomain: protectionDomain } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { scaleIO+: { readOnly: readOnly } },
                '#withSslEnabled':: d.fn(help='', args=[d.arg(name='sslEnabled', type=d.T.boolean)]),
                withSslEnabled(sslEnabled): { scaleIO+: { sslEnabled: sslEnabled } },
                '#withStorageMode':: d.fn(help='', args=[d.arg(name='storageMode', type=d.T.string)]),
                withStorageMode(storageMode): { scaleIO+: { storageMode: storageMode } },
                '#withStoragePool':: d.fn(help='', args=[d.arg(name='storagePool', type=d.T.string)]),
                withStoragePool(storagePool): { scaleIO+: { storagePool: storagePool } },
                '#withSystem':: d.fn(help='', args=[d.arg(name='system', type=d.T.string)]),
                withSystem(system): { scaleIO+: { system: system } },
                '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
                withVolumeName(volumeName): { scaleIO+: { volumeName: volumeName } },
              },
              '#secret':: d.obj(help=''),
              secret: {
                '#items':: d.obj(help=''),
                items: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
                  withMode(mode): { mode: mode },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { path: path },
                },
                '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
                withDefaultMode(defaultMode): { secret+: { defaultMode: defaultMode } },
                '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
                withItems(items): { secret+: { items: if std.isArray(v=items) then items else [items] } },
                '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
                withItemsMixin(items): { secret+: { items+: if std.isArray(v=items) then items else [items] } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { secret+: { optional: optional } },
                '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
                withSecretName(secretName): { secret+: { secretName: secretName } },
              },
              '#storageos':: d.obj(help=''),
              storageos: {
                '#secretRef':: d.obj(help=''),
                secretRef: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { storageos+: { secretRef+: { name: name } } },
                },
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { storageos+: { fsType: fsType } },
                '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
                withReadOnly(readOnly): { storageos+: { readOnly: readOnly } },
                '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
                withVolumeName(volumeName): { storageos+: { volumeName: volumeName } },
                '#withVolumeNamespace':: d.fn(help='', args=[d.arg(name='volumeNamespace', type=d.T.string)]),
                withVolumeNamespace(volumeNamespace): { storageos+: { volumeNamespace: volumeNamespace } },
              },
              '#vsphereVolume':: d.obj(help=''),
              vsphereVolume: {
                '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
                withFsType(fsType): { vsphereVolume+: { fsType: fsType } },
                '#withStoragePolicyID':: d.fn(help='', args=[d.arg(name='storagePolicyID', type=d.T.string)]),
                withStoragePolicyID(storagePolicyID): { vsphereVolume+: { storagePolicyID: storagePolicyID } },
                '#withStoragePolicyName':: d.fn(help='', args=[d.arg(name='storagePolicyName', type=d.T.string)]),
                withStoragePolicyName(storagePolicyName): { vsphereVolume+: { storagePolicyName: storagePolicyName } },
                '#withVolumePath':: d.fn(help='', args=[d.arg(name='volumePath', type=d.T.string)]),
                withVolumePath(volumePath): { vsphereVolume+: { volumePath: volumePath } },
              },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
            },
            '#withActiveDeadlineSeconds':: d.fn(help='', args=[d.arg(name='activeDeadlineSeconds', type=d.T.integer)]),
            withActiveDeadlineSeconds(activeDeadlineSeconds): { spec+: { deployment+: { spec+: { template+: { spec+: { activeDeadlineSeconds: activeDeadlineSeconds } } } } } },
            '#withAutomountServiceAccountToken':: d.fn(help='', args=[d.arg(name='automountServiceAccountToken', type=d.T.boolean)]),
            withAutomountServiceAccountToken(automountServiceAccountToken): { spec+: { deployment+: { spec+: { template+: { spec+: { automountServiceAccountToken: automountServiceAccountToken } } } } } },
            '#withContainers':: d.fn(help='', args=[d.arg(name='containers', type=d.T.array)]),
            withContainers(containers): { spec+: { deployment+: { spec+: { template+: { spec+: { containers: if std.isArray(v=containers) then containers else [containers] } } } } } },
            '#withContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='containers', type=d.T.array)]),
            withContainersMixin(containers): { spec+: { deployment+: { spec+: { template+: { spec+: { containers+: if std.isArray(v=containers) then containers else [containers] } } } } } },
            '#withDnsPolicy':: d.fn(help='', args=[d.arg(name='dnsPolicy', type=d.T.string)]),
            withDnsPolicy(dnsPolicy): { spec+: { deployment+: { spec+: { template+: { spec+: { dnsPolicy: dnsPolicy } } } } } },
            '#withEnableServiceLinks':: d.fn(help='', args=[d.arg(name='enableServiceLinks', type=d.T.boolean)]),
            withEnableServiceLinks(enableServiceLinks): { spec+: { deployment+: { spec+: { template+: { spec+: { enableServiceLinks: enableServiceLinks } } } } } },
            '#withEphemeralContainers':: d.fn(help='', args=[d.arg(name='ephemeralContainers', type=d.T.array)]),
            withEphemeralContainers(ephemeralContainers): { spec+: { deployment+: { spec+: { template+: { spec+: { ephemeralContainers: if std.isArray(v=ephemeralContainers) then ephemeralContainers else [ephemeralContainers] } } } } } },
            '#withEphemeralContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ephemeralContainers', type=d.T.array)]),
            withEphemeralContainersMixin(ephemeralContainers): { spec+: { deployment+: { spec+: { template+: { spec+: { ephemeralContainers+: if std.isArray(v=ephemeralContainers) then ephemeralContainers else [ephemeralContainers] } } } } } },
            '#withHostAliases':: d.fn(help='', args=[d.arg(name='hostAliases', type=d.T.array)]),
            withHostAliases(hostAliases): { spec+: { deployment+: { spec+: { template+: { spec+: { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } } },
            '#withHostAliasesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hostAliases', type=d.T.array)]),
            withHostAliasesMixin(hostAliases): { spec+: { deployment+: { spec+: { template+: { spec+: { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } } },
            '#withHostIPC':: d.fn(help='', args=[d.arg(name='hostIPC', type=d.T.boolean)]),
            withHostIPC(hostIPC): { spec+: { deployment+: { spec+: { template+: { spec+: { hostIPC: hostIPC } } } } } },
            '#withHostNetwork':: d.fn(help='', args=[d.arg(name='hostNetwork', type=d.T.boolean)]),
            withHostNetwork(hostNetwork): { spec+: { deployment+: { spec+: { template+: { spec+: { hostNetwork: hostNetwork } } } } } },
            '#withHostPID':: d.fn(help='', args=[d.arg(name='hostPID', type=d.T.boolean)]),
            withHostPID(hostPID): { spec+: { deployment+: { spec+: { template+: { spec+: { hostPID: hostPID } } } } } },
            '#withHostUsers':: d.fn(help='', args=[d.arg(name='hostUsers', type=d.T.boolean)]),
            withHostUsers(hostUsers): { spec+: { deployment+: { spec+: { template+: { spec+: { hostUsers: hostUsers } } } } } },
            '#withHostname':: d.fn(help='', args=[d.arg(name='hostname', type=d.T.string)]),
            withHostname(hostname): { spec+: { deployment+: { spec+: { template+: { spec+: { hostname: hostname } } } } } },
            '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
            withImagePullSecrets(imagePullSecrets): { spec+: { deployment+: { spec+: { template+: { spec+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } } },
            '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
            withImagePullSecretsMixin(imagePullSecrets): { spec+: { deployment+: { spec+: { template+: { spec+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } } },
            '#withInitContainers':: d.fn(help='', args=[d.arg(name='initContainers', type=d.T.array)]),
            withInitContainers(initContainers): { spec+: { deployment+: { spec+: { template+: { spec+: { initContainers: if std.isArray(v=initContainers) then initContainers else [initContainers] } } } } } },
            '#withInitContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='initContainers', type=d.T.array)]),
            withInitContainersMixin(initContainers): { spec+: { deployment+: { spec+: { template+: { spec+: { initContainers+: if std.isArray(v=initContainers) then initContainers else [initContainers] } } } } } },
            '#withNodeName':: d.fn(help='', args=[d.arg(name='nodeName', type=d.T.string)]),
            withNodeName(nodeName): { spec+: { deployment+: { spec+: { template+: { spec+: { nodeName: nodeName } } } } } },
            '#withNodeSelector':: d.fn(help='', args=[d.arg(name='nodeSelector', type=d.T.object)]),
            withNodeSelector(nodeSelector): { spec+: { deployment+: { spec+: { template+: { spec+: { nodeSelector: nodeSelector } } } } } },
            '#withNodeSelectorMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelector', type=d.T.object)]),
            withNodeSelectorMixin(nodeSelector): { spec+: { deployment+: { spec+: { template+: { spec+: { nodeSelector+: nodeSelector } } } } } },
            '#withOverhead':: d.fn(help='', args=[d.arg(name='overhead', type=d.T.object)]),
            withOverhead(overhead): { spec+: { deployment+: { spec+: { template+: { spec+: { overhead: overhead } } } } } },
            '#withOverheadMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='overhead', type=d.T.object)]),
            withOverheadMixin(overhead): { spec+: { deployment+: { spec+: { template+: { spec+: { overhead+: overhead } } } } } },
            '#withPreemptionPolicy':: d.fn(help='', args=[d.arg(name='preemptionPolicy', type=d.T.string)]),
            withPreemptionPolicy(preemptionPolicy): { spec+: { deployment+: { spec+: { template+: { spec+: { preemptionPolicy: preemptionPolicy } } } } } },
            '#withPriority':: d.fn(help='', args=[d.arg(name='priority', type=d.T.integer)]),
            withPriority(priority): { spec+: { deployment+: { spec+: { template+: { spec+: { priority: priority } } } } } },
            '#withPriorityClassName':: d.fn(help='', args=[d.arg(name='priorityClassName', type=d.T.string)]),
            withPriorityClassName(priorityClassName): { spec+: { deployment+: { spec+: { template+: { spec+: { priorityClassName: priorityClassName } } } } } },
            '#withReadinessGates':: d.fn(help='', args=[d.arg(name='readinessGates', type=d.T.array)]),
            withReadinessGates(readinessGates): { spec+: { deployment+: { spec+: { template+: { spec+: { readinessGates: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } } } } },
            '#withReadinessGatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='readinessGates', type=d.T.array)]),
            withReadinessGatesMixin(readinessGates): { spec+: { deployment+: { spec+: { template+: { spec+: { readinessGates+: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } } } } },
            '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
            withRestartPolicy(restartPolicy): { spec+: { deployment+: { spec+: { template+: { spec+: { restartPolicy: restartPolicy } } } } } },
            '#withRuntimeClassName':: d.fn(help='', args=[d.arg(name='runtimeClassName', type=d.T.string)]),
            withRuntimeClassName(runtimeClassName): { spec+: { deployment+: { spec+: { template+: { spec+: { runtimeClassName: runtimeClassName } } } } } },
            '#withSchedulerName':: d.fn(help='', args=[d.arg(name='schedulerName', type=d.T.string)]),
            withSchedulerName(schedulerName): { spec+: { deployment+: { spec+: { template+: { spec+: { schedulerName: schedulerName } } } } } },
            '#withServiceAccount':: d.fn(help='', args=[d.arg(name='serviceAccount', type=d.T.string)]),
            withServiceAccount(serviceAccount): { spec+: { deployment+: { spec+: { template+: { spec+: { serviceAccount: serviceAccount } } } } } },
            '#withServiceAccountName':: d.fn(help='', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
            withServiceAccountName(serviceAccountName): { spec+: { deployment+: { spec+: { template+: { spec+: { serviceAccountName: serviceAccountName } } } } } },
            '#withSetHostnameAsFQDN':: d.fn(help='', args=[d.arg(name='setHostnameAsFQDN', type=d.T.boolean)]),
            withSetHostnameAsFQDN(setHostnameAsFQDN): { spec+: { deployment+: { spec+: { template+: { spec+: { setHostnameAsFQDN: setHostnameAsFQDN } } } } } },
            '#withShareProcessNamespace':: d.fn(help='', args=[d.arg(name='shareProcessNamespace', type=d.T.boolean)]),
            withShareProcessNamespace(shareProcessNamespace): { spec+: { deployment+: { spec+: { template+: { spec+: { shareProcessNamespace: shareProcessNamespace } } } } } },
            '#withSubdomain':: d.fn(help='', args=[d.arg(name='subdomain', type=d.T.string)]),
            withSubdomain(subdomain): { spec+: { deployment+: { spec+: { template+: { spec+: { subdomain: subdomain } } } } } },
            '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
            withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { deployment+: { spec+: { template+: { spec+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } } } } },
            '#withTolerations':: d.fn(help='', args=[d.arg(name='tolerations', type=d.T.array)]),
            withTolerations(tolerations): { spec+: { deployment+: { spec+: { template+: { spec+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } } },
            '#withTolerationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tolerations', type=d.T.array)]),
            withTolerationsMixin(tolerations): { spec+: { deployment+: { spec+: { template+: { spec+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } } },
            '#withTopologySpreadConstraints':: d.fn(help='', args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
            withTopologySpreadConstraints(topologySpreadConstraints): { spec+: { deployment+: { spec+: { template+: { spec+: { topologySpreadConstraints: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } } },
            '#withTopologySpreadConstraintsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
            withTopologySpreadConstraintsMixin(topologySpreadConstraints): { spec+: { deployment+: { spec+: { template+: { spec+: { topologySpreadConstraints+: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } } },
            '#withVolumes':: d.fn(help='', args=[d.arg(name='volumes', type=d.T.array)]),
            withVolumes(volumes): { spec+: { deployment+: { spec+: { template+: { spec+: { volumes: if std.isArray(v=volumes) then volumes else [volumes] } } } } } },
            '#withVolumesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumes', type=d.T.array)]),
            withVolumesMixin(volumes): { spec+: { deployment+: { spec+: { template+: { spec+: { volumes+: if std.isArray(v=volumes) then volumes else [volumes] } } } } } },
          },
        },
        '#withMinReadySeconds':: d.fn(help='', args=[d.arg(name='minReadySeconds', type=d.T.integer)]),
        withMinReadySeconds(minReadySeconds): { spec+: { deployment+: { spec+: { minReadySeconds: minReadySeconds } } } },
        '#withPaused':: d.fn(help='', args=[d.arg(name='paused', type=d.T.boolean)]),
        withPaused(paused): { spec+: { deployment+: { spec+: { paused: paused } } } },
        '#withProgressDeadlineSeconds':: d.fn(help='', args=[d.arg(name='progressDeadlineSeconds', type=d.T.integer)]),
        withProgressDeadlineSeconds(progressDeadlineSeconds): { spec+: { deployment+: { spec+: { progressDeadlineSeconds: progressDeadlineSeconds } } } },
        '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.integer)]),
        withReplicas(replicas): { spec+: { deployment+: { spec+: { replicas: replicas } } } },
        '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
        withRevisionHistoryLimit(revisionHistoryLimit): { spec+: { deployment+: { spec+: { revisionHistoryLimit: revisionHistoryLimit } } } },
      },
    },
    '#external':: d.obj(help=''),
    external: {
      '#adminPassword':: d.obj(help=''),
      adminPassword: {
        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { external+: { adminPassword+: { key: key } } } },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { external+: { adminPassword+: { name: name } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { spec+: { external+: { adminPassword+: { optional: optional } } } },
      },
      '#adminUser':: d.obj(help=''),
      adminUser: {
        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { external+: { adminUser+: { key: key } } } },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { external+: { adminUser+: { name: name } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { spec+: { external+: { adminUser+: { optional: optional } } } },
      },
      '#apiKey':: d.obj(help=''),
      apiKey: {
        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { external+: { apiKey+: { key: key } } } },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { external+: { apiKey+: { name: name } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { spec+: { external+: { apiKey+: { optional: optional } } } },
      },
      '#withUrl':: d.fn(help='', args=[d.arg(name='url', type=d.T.string)]),
      withUrl(url): { spec+: { external+: { url: url } } },
    },
    '#ingress':: d.obj(help=''),
    ingress: {
      '#metadata':: d.obj(help=''),
      metadata: {
        '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { ingress+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { ingress+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { ingress+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { ingress+: { metadata+: { labels+: labels } } } },
      },
      '#spec':: d.obj(help=''),
      spec: {
        '#defaultBackend':: d.obj(help=''),
        defaultBackend: {
          '#resource':: d.obj(help=''),
          resource: {
            '#withApiGroup':: d.fn(help='', args=[d.arg(name='apiGroup', type=d.T.string)]),
            withApiGroup(apiGroup): { spec+: { ingress+: { spec+: { defaultBackend+: { resource+: { apiGroup: apiGroup } } } } } },
            '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
            withKind(kind): { spec+: { ingress+: { spec+: { defaultBackend+: { resource+: { kind: kind } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { ingress+: { spec+: { defaultBackend+: { resource+: { name: name } } } } } },
          },
          '#service':: d.obj(help=''),
          service: {
            '#port':: d.obj(help=''),
            port: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { ingress+: { spec+: { defaultBackend+: { service+: { port+: { name: name } } } } } } },
              '#withNumber':: d.fn(help='', args=[d.arg(name='number', type=d.T.integer)]),
              withNumber(number): { spec+: { ingress+: { spec+: { defaultBackend+: { service+: { port+: { number: number } } } } } } },
            },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { ingress+: { spec+: { defaultBackend+: { service+: { name: name } } } } } },
          },
        },
        '#rules':: d.obj(help=''),
        rules: {
          '#http':: d.obj(help=''),
          http: {
            '#paths':: d.obj(help=''),
            paths: {
              '#backend':: d.obj(help=''),
              backend: {
                '#resource':: d.obj(help=''),
                resource: {
                  '#withApiGroup':: d.fn(help='', args=[d.arg(name='apiGroup', type=d.T.string)]),
                  withApiGroup(apiGroup): { backend+: { resource+: { apiGroup: apiGroup } } },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { backend+: { resource+: { kind: kind } } },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { backend+: { resource+: { name: name } } },
                },
                '#service':: d.obj(help=''),
                service: {
                  '#port':: d.obj(help=''),
                  port: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { backend+: { service+: { port+: { name: name } } } },
                    '#withNumber':: d.fn(help='', args=[d.arg(name='number', type=d.T.integer)]),
                    withNumber(number): { backend+: { service+: { port+: { number: number } } } },
                  },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { backend+: { service+: { name: name } } },
                },
              },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
              '#withPathType':: d.fn(help='', args=[d.arg(name='pathType', type=d.T.string)]),
              withPathType(pathType): { pathType: pathType },
            },
            '#withPaths':: d.fn(help='', args=[d.arg(name='paths', type=d.T.array)]),
            withPaths(paths): { http+: { paths: if std.isArray(v=paths) then paths else [paths] } },
            '#withPathsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='paths', type=d.T.array)]),
            withPathsMixin(paths): { http+: { paths+: if std.isArray(v=paths) then paths else [paths] } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { host: host },
        },
        '#tls':: d.obj(help=''),
        tls: {
          '#withHosts':: d.fn(help='', args=[d.arg(name='hosts', type=d.T.array)]),
          withHosts(hosts): { hosts: if std.isArray(v=hosts) then hosts else [hosts] },
          '#withHostsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hosts', type=d.T.array)]),
          withHostsMixin(hosts): { hosts+: if std.isArray(v=hosts) then hosts else [hosts] },
          '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
          withSecretName(secretName): { secretName: secretName },
        },
        '#withIngressClassName':: d.fn(help='', args=[d.arg(name='ingressClassName', type=d.T.string)]),
        withIngressClassName(ingressClassName): { spec+: { ingress+: { spec+: { ingressClassName: ingressClassName } } } },
        '#withRules':: d.fn(help='', args=[d.arg(name='rules', type=d.T.array)]),
        withRules(rules): { spec+: { ingress+: { spec+: { rules: if std.isArray(v=rules) then rules else [rules] } } } },
        '#withRulesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='rules', type=d.T.array)]),
        withRulesMixin(rules): { spec+: { ingress+: { spec+: { rules+: if std.isArray(v=rules) then rules else [rules] } } } },
        '#withTls':: d.fn(help='', args=[d.arg(name='tls', type=d.T.array)]),
        withTls(tls): { spec+: { ingress+: { spec+: { tls: if std.isArray(v=tls) then tls else [tls] } } } },
        '#withTlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tls', type=d.T.array)]),
        withTlsMixin(tls): { spec+: { ingress+: { spec+: { tls+: if std.isArray(v=tls) then tls else [tls] } } } },
      },
    },
    '#jsonnet':: d.obj(help=''),
    jsonnet: {
      '#libraryLabelSelector':: d.obj(help=''),
      libraryLabelSelector: {
        '#matchExpressions':: d.obj(help=''),
        matchExpressions: {
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { key: key },
          '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
          withOperator(operator): { operator: operator },
          '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
          withValues(values): { values: if std.isArray(v=values) then values else [values] },
          '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
          withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
        },
        '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
        withMatchExpressions(matchExpressions): { spec+: { jsonnet+: { libraryLabelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } },
        '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
        withMatchExpressionsMixin(matchExpressions): { spec+: { jsonnet+: { libraryLabelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } },
        '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabels(matchLabels): { spec+: { jsonnet+: { libraryLabelSelector+: { matchLabels: matchLabels } } } },
        '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabelsMixin(matchLabels): { spec+: { jsonnet+: { libraryLabelSelector+: { matchLabels+: matchLabels } } } },
      },
    },
    '#persistentVolumeClaim':: d.obj(help=''),
    persistentVolumeClaim: {
      '#metadata':: d.obj(help=''),
      metadata: {
        '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { persistentVolumeClaim+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { persistentVolumeClaim+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { persistentVolumeClaim+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { persistentVolumeClaim+: { metadata+: { labels+: labels } } } },
      },
      '#spec':: d.obj(help=''),
      spec: {
        '#dataSource':: d.obj(help=''),
        dataSource: {
          '#withApiGroup':: d.fn(help='', args=[d.arg(name='apiGroup', type=d.T.string)]),
          withApiGroup(apiGroup): { spec+: { persistentVolumeClaim+: { spec+: { dataSource+: { apiGroup: apiGroup } } } } },
          '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { spec+: { persistentVolumeClaim+: { spec+: { dataSource+: { kind: kind } } } } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { persistentVolumeClaim+: { spec+: { dataSource+: { name: name } } } } },
        },
        '#dataSourceRef':: d.obj(help=''),
        dataSourceRef: {
          '#withApiGroup':: d.fn(help='', args=[d.arg(name='apiGroup', type=d.T.string)]),
          withApiGroup(apiGroup): { spec+: { persistentVolumeClaim+: { spec+: { dataSourceRef+: { apiGroup: apiGroup } } } } },
          '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { spec+: { persistentVolumeClaim+: { spec+: { dataSourceRef+: { kind: kind } } } } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { persistentVolumeClaim+: { spec+: { dataSourceRef+: { name: name } } } } },
        },
        '#resources':: d.obj(help=''),
        resources: {
          '#claims':: d.obj(help=''),
          claims: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
          },
          '#withClaims':: d.fn(help='', args=[d.arg(name='claims', type=d.T.array)]),
          withClaims(claims): { spec+: { persistentVolumeClaim+: { spec+: { resources+: { claims: if std.isArray(v=claims) then claims else [claims] } } } } },
          '#withClaimsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='claims', type=d.T.array)]),
          withClaimsMixin(claims): { spec+: { persistentVolumeClaim+: { spec+: { resources+: { claims+: if std.isArray(v=claims) then claims else [claims] } } } } },
          '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
          withLimits(limits): { spec+: { persistentVolumeClaim+: { spec+: { resources+: { limits: limits } } } } },
          '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
          withLimitsMixin(limits): { spec+: { persistentVolumeClaim+: { spec+: { resources+: { limits+: limits } } } } },
          '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
          withRequests(requests): { spec+: { persistentVolumeClaim+: { spec+: { resources+: { requests: requests } } } } },
          '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
          withRequestsMixin(requests): { spec+: { persistentVolumeClaim+: { spec+: { resources+: { requests+: requests } } } } },
        },
        '#selector':: d.obj(help=''),
        selector: {
          '#matchExpressions':: d.obj(help=''),
          matchExpressions: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressions(matchExpressions): { spec+: { persistentVolumeClaim+: { spec+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } },
          '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressionsMixin(matchExpressions): { spec+: { persistentVolumeClaim+: { spec+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } },
          '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabels(matchLabels): { spec+: { persistentVolumeClaim+: { spec+: { selector+: { matchLabels: matchLabels } } } } },
          '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabelsMixin(matchLabels): { spec+: { persistentVolumeClaim+: { spec+: { selector+: { matchLabels+: matchLabels } } } } },
        },
        '#withAccessModes':: d.fn(help='', args=[d.arg(name='accessModes', type=d.T.array)]),
        withAccessModes(accessModes): { spec+: { persistentVolumeClaim+: { spec+: { accessModes: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } },
        '#withAccessModesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='accessModes', type=d.T.array)]),
        withAccessModesMixin(accessModes): { spec+: { persistentVolumeClaim+: { spec+: { accessModes+: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } },
        '#withStorageClassName':: d.fn(help='', args=[d.arg(name='storageClassName', type=d.T.string)]),
        withStorageClassName(storageClassName): { spec+: { persistentVolumeClaim+: { spec+: { storageClassName: storageClassName } } } },
        '#withVolumeMode':: d.fn(help='', args=[d.arg(name='volumeMode', type=d.T.string)]),
        withVolumeMode(volumeMode): { spec+: { persistentVolumeClaim+: { spec+: { volumeMode: volumeMode } } } },
        '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
        withVolumeName(volumeName): { spec+: { persistentVolumeClaim+: { spec+: { volumeName: volumeName } } } },
      },
    },
    '#preferences':: d.obj(help=''),
    preferences: {
      '#withHomeDashboardUid':: d.fn(help='', args=[d.arg(name='homeDashboardUid', type=d.T.string)]),
      withHomeDashboardUid(homeDashboardUid): { spec+: { preferences+: { homeDashboardUid: homeDashboardUid } } },
    },
    '#route':: d.obj(help=''),
    route: {
      '#metadata':: d.obj(help=''),
      metadata: {
        '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { route+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { route+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { route+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { route+: { metadata+: { labels+: labels } } } },
      },
      '#spec':: d.obj(help=''),
      spec: {
        '#alternateBackends':: d.obj(help=''),
        alternateBackends: {
          '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { kind: kind },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
          withWeight(weight): { weight: weight },
        },
        '#port':: d.obj(help=''),
        port: {
          '#withTargetPort':: d.fn(help='', args=[d.arg(name='targetPort', type=d.T.any)]),
          withTargetPort(targetPort): { spec+: { route+: { spec+: { port+: { targetPort: targetPort } } } } },
        },
        '#tls':: d.obj(help=''),
        tls: {
          '#withCaCertificate':: d.fn(help='', args=[d.arg(name='caCertificate', type=d.T.string)]),
          withCaCertificate(caCertificate): { spec+: { route+: { spec+: { tls+: { caCertificate: caCertificate } } } } },
          '#withCertificate':: d.fn(help='', args=[d.arg(name='certificate', type=d.T.string)]),
          withCertificate(certificate): { spec+: { route+: { spec+: { tls+: { certificate: certificate } } } } },
          '#withDestinationCACertificate':: d.fn(help='', args=[d.arg(name='destinationCACertificate', type=d.T.string)]),
          withDestinationCACertificate(destinationCACertificate): { spec+: { route+: { spec+: { tls+: { destinationCACertificate: destinationCACertificate } } } } },
          '#withInsecureEdgeTerminationPolicy':: d.fn(help='', args=[d.arg(name='insecureEdgeTerminationPolicy', type=d.T.string)]),
          withInsecureEdgeTerminationPolicy(insecureEdgeTerminationPolicy): { spec+: { route+: { spec+: { tls+: { insecureEdgeTerminationPolicy: insecureEdgeTerminationPolicy } } } } },
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { spec+: { route+: { spec+: { tls+: { key: key } } } } },
          '#withTermination':: d.fn(help='', args=[d.arg(name='termination', type=d.T.string)]),
          withTermination(termination): { spec+: { route+: { spec+: { tls+: { termination: termination } } } } },
        },
        '#to':: d.obj(help=''),
        to: {
          '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { spec+: { route+: { spec+: { to+: { kind: kind } } } } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { route+: { spec+: { to+: { name: name } } } } },
          '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
          withWeight(weight): { spec+: { route+: { spec+: { to+: { weight: weight } } } } },
        },
        '#withAlternateBackends':: d.fn(help='', args=[d.arg(name='alternateBackends', type=d.T.array)]),
        withAlternateBackends(alternateBackends): { spec+: { route+: { spec+: { alternateBackends: if std.isArray(v=alternateBackends) then alternateBackends else [alternateBackends] } } } },
        '#withAlternateBackendsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='alternateBackends', type=d.T.array)]),
        withAlternateBackendsMixin(alternateBackends): { spec+: { route+: { spec+: { alternateBackends+: if std.isArray(v=alternateBackends) then alternateBackends else [alternateBackends] } } } },
        '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
        withHost(host): { spec+: { route+: { spec+: { host: host } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { route+: { spec+: { path: path } } } },
        '#withWildcardPolicy':: d.fn(help='', args=[d.arg(name='wildcardPolicy', type=d.T.string)]),
        withWildcardPolicy(wildcardPolicy): { spec+: { route+: { spec+: { wildcardPolicy: wildcardPolicy } } } },
      },
    },
    '#service':: d.obj(help=''),
    service: {
      '#metadata':: d.obj(help=''),
      metadata: {
        '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { service+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { service+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { service+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { service+: { metadata+: { labels+: labels } } } },
      },
      '#spec':: d.obj(help=''),
      spec: {
        '#ports':: d.obj(help=''),
        ports: {
          '#withAppProtocol':: d.fn(help='', args=[d.arg(name='appProtocol', type=d.T.string)]),
          withAppProtocol(appProtocol): { appProtocol: appProtocol },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withNodePort':: d.fn(help='', args=[d.arg(name='nodePort', type=d.T.integer)]),
          withNodePort(nodePort): { nodePort: nodePort },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
          withPort(port): { port: port },
          '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
          withProtocol(protocol): { protocol: protocol },
          '#withTargetPort':: d.fn(help='', args=[d.arg(name='targetPort', type=d.T.any)]),
          withTargetPort(targetPort): { targetPort: targetPort },
        },
        '#sessionAffinityConfig':: d.obj(help=''),
        sessionAffinityConfig: {
          '#clientIP':: d.obj(help=''),
          clientIP: {
            '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
            withTimeoutSeconds(timeoutSeconds): { spec+: { service+: { spec+: { sessionAffinityConfig+: { clientIP+: { timeoutSeconds: timeoutSeconds } } } } } },
          },
        },
        '#withAllocateLoadBalancerNodePorts':: d.fn(help='', args=[d.arg(name='allocateLoadBalancerNodePorts', type=d.T.boolean)]),
        withAllocateLoadBalancerNodePorts(allocateLoadBalancerNodePorts): { spec+: { service+: { spec+: { allocateLoadBalancerNodePorts: allocateLoadBalancerNodePorts } } } },
        '#withClusterIP':: d.fn(help='', args=[d.arg(name='clusterIP', type=d.T.string)]),
        withClusterIP(clusterIP): { spec+: { service+: { spec+: { clusterIP: clusterIP } } } },
        '#withClusterIPs':: d.fn(help='', args=[d.arg(name='clusterIPs', type=d.T.array)]),
        withClusterIPs(clusterIPs): { spec+: { service+: { spec+: { clusterIPs: if std.isArray(v=clusterIPs) then clusterIPs else [clusterIPs] } } } },
        '#withClusterIPsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='clusterIPs', type=d.T.array)]),
        withClusterIPsMixin(clusterIPs): { spec+: { service+: { spec+: { clusterIPs+: if std.isArray(v=clusterIPs) then clusterIPs else [clusterIPs] } } } },
        '#withExternalIPs':: d.fn(help='', args=[d.arg(name='externalIPs', type=d.T.array)]),
        withExternalIPs(externalIPs): { spec+: { service+: { spec+: { externalIPs: if std.isArray(v=externalIPs) then externalIPs else [externalIPs] } } } },
        '#withExternalIPsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='externalIPs', type=d.T.array)]),
        withExternalIPsMixin(externalIPs): { spec+: { service+: { spec+: { externalIPs+: if std.isArray(v=externalIPs) then externalIPs else [externalIPs] } } } },
        '#withExternalName':: d.fn(help='', args=[d.arg(name='externalName', type=d.T.string)]),
        withExternalName(externalName): { spec+: { service+: { spec+: { externalName: externalName } } } },
        '#withExternalTrafficPolicy':: d.fn(help='', args=[d.arg(name='externalTrafficPolicy', type=d.T.string)]),
        withExternalTrafficPolicy(externalTrafficPolicy): { spec+: { service+: { spec+: { externalTrafficPolicy: externalTrafficPolicy } } } },
        '#withHealthCheckNodePort':: d.fn(help='', args=[d.arg(name='healthCheckNodePort', type=d.T.integer)]),
        withHealthCheckNodePort(healthCheckNodePort): { spec+: { service+: { spec+: { healthCheckNodePort: healthCheckNodePort } } } },
        '#withInternalTrafficPolicy':: d.fn(help='', args=[d.arg(name='internalTrafficPolicy', type=d.T.string)]),
        withInternalTrafficPolicy(internalTrafficPolicy): { spec+: { service+: { spec+: { internalTrafficPolicy: internalTrafficPolicy } } } },
        '#withIpFamilies':: d.fn(help='', args=[d.arg(name='ipFamilies', type=d.T.array)]),
        withIpFamilies(ipFamilies): { spec+: { service+: { spec+: { ipFamilies: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } },
        '#withIpFamiliesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipFamilies', type=d.T.array)]),
        withIpFamiliesMixin(ipFamilies): { spec+: { service+: { spec+: { ipFamilies+: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } },
        '#withIpFamilyPolicy':: d.fn(help='', args=[d.arg(name='ipFamilyPolicy', type=d.T.string)]),
        withIpFamilyPolicy(ipFamilyPolicy): { spec+: { service+: { spec+: { ipFamilyPolicy: ipFamilyPolicy } } } },
        '#withLoadBalancerClass':: d.fn(help='', args=[d.arg(name='loadBalancerClass', type=d.T.string)]),
        withLoadBalancerClass(loadBalancerClass): { spec+: { service+: { spec+: { loadBalancerClass: loadBalancerClass } } } },
        '#withLoadBalancerIP':: d.fn(help='', args=[d.arg(name='loadBalancerIP', type=d.T.string)]),
        withLoadBalancerIP(loadBalancerIP): { spec+: { service+: { spec+: { loadBalancerIP: loadBalancerIP } } } },
        '#withLoadBalancerSourceRanges':: d.fn(help='', args=[d.arg(name='loadBalancerSourceRanges', type=d.T.array)]),
        withLoadBalancerSourceRanges(loadBalancerSourceRanges): { spec+: { service+: { spec+: { loadBalancerSourceRanges: if std.isArray(v=loadBalancerSourceRanges) then loadBalancerSourceRanges else [loadBalancerSourceRanges] } } } },
        '#withLoadBalancerSourceRangesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='loadBalancerSourceRanges', type=d.T.array)]),
        withLoadBalancerSourceRangesMixin(loadBalancerSourceRanges): { spec+: { service+: { spec+: { loadBalancerSourceRanges+: if std.isArray(v=loadBalancerSourceRanges) then loadBalancerSourceRanges else [loadBalancerSourceRanges] } } } },
        '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
        withPorts(ports): { spec+: { service+: { spec+: { ports: if std.isArray(v=ports) then ports else [ports] } } } },
        '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
        withPortsMixin(ports): { spec+: { service+: { spec+: { ports+: if std.isArray(v=ports) then ports else [ports] } } } },
        '#withPublishNotReadyAddresses':: d.fn(help='', args=[d.arg(name='publishNotReadyAddresses', type=d.T.boolean)]),
        withPublishNotReadyAddresses(publishNotReadyAddresses): { spec+: { service+: { spec+: { publishNotReadyAddresses: publishNotReadyAddresses } } } },
        '#withSelector':: d.fn(help='', args=[d.arg(name='selector', type=d.T.object)]),
        withSelector(selector): { spec+: { service+: { spec+: { selector: selector } } } },
        '#withSelectorMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='selector', type=d.T.object)]),
        withSelectorMixin(selector): { spec+: { service+: { spec+: { selector+: selector } } } },
        '#withSessionAffinity':: d.fn(help='', args=[d.arg(name='sessionAffinity', type=d.T.string)]),
        withSessionAffinity(sessionAffinity): { spec+: { service+: { spec+: { sessionAffinity: sessionAffinity } } } },
        '#withTrafficDistribution':: d.fn(help='', args=[d.arg(name='trafficDistribution', type=d.T.string)]),
        withTrafficDistribution(trafficDistribution): { spec+: { service+: { spec+: { trafficDistribution: trafficDistribution } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { service+: { spec+: { type: type } } } },
      },
    },
    '#serviceAccount':: d.obj(help=''),
    serviceAccount: {
      '#imagePullSecrets':: d.obj(help=''),
      imagePullSecrets: {
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#metadata':: d.obj(help=''),
      metadata: {
        '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { serviceAccount+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { serviceAccount+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { serviceAccount+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { serviceAccount+: { metadata+: { labels+: labels } } } },
      },
      '#secrets':: d.obj(help=''),
      secrets: {
        '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
        withApiVersion(apiVersion): { apiVersion: apiVersion },
        '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
        withFieldPath(fieldPath): { fieldPath: fieldPath },
        '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
        withKind(kind): { kind: kind },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { namespace: namespace },
        '#withResourceVersion':: d.fn(help='', args=[d.arg(name='resourceVersion', type=d.T.string)]),
        withResourceVersion(resourceVersion): { resourceVersion: resourceVersion },
        '#withUid':: d.fn(help='', args=[d.arg(name='uid', type=d.T.string)]),
        withUid(uid): { uid: uid },
      },
      '#withAutomountServiceAccountToken':: d.fn(help='', args=[d.arg(name='automountServiceAccountToken', type=d.T.boolean)]),
      withAutomountServiceAccountToken(automountServiceAccountToken): { spec+: { serviceAccount+: { automountServiceAccountToken: automountServiceAccountToken } } },
      '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecrets(imagePullSecrets): { spec+: { serviceAccount+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecretsMixin(imagePullSecrets): { spec+: { serviceAccount+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withSecrets':: d.fn(help='', args=[d.arg(name='secrets', type=d.T.array)]),
      withSecrets(secrets): { spec+: { serviceAccount+: { secrets: if std.isArray(v=secrets) then secrets else [secrets] } } },
      '#withSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='secrets', type=d.T.array)]),
      withSecretsMixin(secrets): { spec+: { serviceAccount+: { secrets+: if std.isArray(v=secrets) then secrets else [secrets] } } },
    },
    '#withConfig':: d.fn(help='', args=[d.arg(name='config', type=d.T.object)]),
    withConfig(config): { spec+: { config: config } },
    '#withConfigMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='config', type=d.T.object)]),
    withConfigMixin(config): { spec+: { config+: config } },
    '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
    withVersion(version): { spec+: { version: version } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
